// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package base

import (
	"github.com/byteflowing/base/biz/config"
	"github.com/byteflowing/base/biz/dal"
	"github.com/byteflowing/base/biz/pkg/message"
	"github.com/byteflowing/base/biz/pkg/user"
	"github.com/byteflowing/go-common/orm"
	"github.com/byteflowing/go-common/redis"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func New(confFile string) *Service {
	configConfig := config.New(confFile)
	messageConfig := configConfig.Message
	redisConfig := configConfig.RDB
	redisRedis := redis.New(redisConfig)
	ormConfig := configConfig.DB
	db := orm.New(ormConfig)
	query := dal.New(db)
	opts := &message.Opts{
		Config: messageConfig,
		RDB:    redisRedis,
		DB:     query,
	}
	messageMessage := message.New(opts)
	userConfig := configConfig.User
	userOpts := &user.Opts{
		Config:  userConfig,
		DB:      query,
		RDB:     redisRedis,
		Message: messageMessage,
	}
	userUser := user.New(userOpts)
	serviceOpts := &ServiceOpts{
		Config:  configConfig,
		Message: messageMessage,
		User:    userUser,
	}
	service := NewService(serviceOpts)
	return service
}

func New2(conf *config.Config, orm2 *gorm.DB, redis2 *redis.Redis) *Service {
	messageConfig := conf.Message
	query := dal.New(orm2)
	opts := &message.Opts{
		Config: messageConfig,
		RDB:    redis2,
		DB:     query,
	}
	messageMessage := message.New(opts)
	userConfig := conf.User
	userOpts := &user.Opts{
		Config:  userConfig,
		DB:      query,
		RDB:     redis2,
		Message: messageMessage,
	}
	userUser := user.New(userOpts)
	serviceOpts := &ServiceOpts{
		Config:  conf,
		Message: messageMessage,
		User:    userUser,
	}
	service := NewService(serviceOpts)
	return service
}

// wire.go:

var providerSet = wire.NewSet(redis.New, orm.New, dal.New, config.New, NewService, message.New, user.New, wire.Struct(new(ServiceOpts), "*"), wire.Struct(new(user.Opts), "*"), wire.Struct(new(message.Opts), "*"), wire.FieldsOf(new(*config.Config), "DB", "RDB", "Message", "User"))

var providerSet2 = wire.NewSet(dal.New, NewService, message.New, user.New, wire.Struct(new(ServiceOpts), "*"), wire.Struct(new(user.Opts), "*"), wire.Struct(new(message.Opts), "*"), wire.FieldsOf(new(*config.Config), "User", "Message"))
