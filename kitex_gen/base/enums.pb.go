// Code generated by Kitex v0.14.1. DO NOT EDIT.

package base

import "strconv"

type CaptchaType int32

const (
	CaptchaType_CAPTCHA_TYPE_UNSPECIFIED CaptchaType = 0
	CaptchaType_CAPTCHA_TYPE_LOGIN       CaptchaType = 1
	CaptchaType_CAPTCHA_TYPE_OTHER       CaptchaType = 255
)

// Enum value maps for CaptchaType.
var CaptchaType_name = map[int32]string{
	0:   "CAPTCHA_TYPE_UNSPECIFIED",
	1:   "CAPTCHA_TYPE_LOGIN",
	255: "CAPTCHA_TYPE_OTHER",
}

var CaptchaType_value = map[string]int32{
	"CAPTCHA_TYPE_UNSPECIFIED": 0,
	"CAPTCHA_TYPE_LOGIN":       1,
	"CAPTCHA_TYPE_OTHER":       255,
}

func (x CaptchaType) String() string {
	s, ok := CaptchaType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// 枚举值这里组合比较多，使用bitmask
// 每个枚举值向左位移一位
// 使用的时候需要使用"|"进行按位运算
type CaptchaCombination int32

const (
	CaptchaCombination_CAPTCHA_COMBINATION_UNSPECIFIED CaptchaCombination = 0
	CaptchaCombination_CAPTCHA_COMBINATION_NUMBER      CaptchaCombination = 1
	CaptchaCombination_CAPTCHA_COMBINATION_UPPERCASE   CaptchaCombination = 2
	CaptchaCombination_CAPTCHA_COMBINATION_LOWERCASE   CaptchaCombination = 4
	CaptchaCombination_CAPTCHA_COMBINATION_SYMBOL      CaptchaCombination = 8
)

// Enum value maps for CaptchaCombination.
var CaptchaCombination_name = map[int32]string{
	0: "CAPTCHA_COMBINATION_UNSPECIFIED",
	1: "CAPTCHA_COMBINATION_NUMBER",
	2: "CAPTCHA_COMBINATION_UPPERCASE",
	4: "CAPTCHA_COMBINATION_LOWERCASE",
	8: "CAPTCHA_COMBINATION_SYMBOL",
}

var CaptchaCombination_value = map[string]int32{
	"CAPTCHA_COMBINATION_UNSPECIFIED": 0,
	"CAPTCHA_COMBINATION_NUMBER":      1,
	"CAPTCHA_COMBINATION_UPPERCASE":   2,
	"CAPTCHA_COMBINATION_LOWERCASE":   4,
	"CAPTCHA_COMBINATION_SYMBOL":      8,
}

func (x CaptchaCombination) String() string {
	s, ok := CaptchaCombination_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type MessageSender int32

const (
	MessageSender_MESSAGE_SENDER_UNSPECIFIED MessageSender = 0
	MessageSender_MESSAGE_SENDER_SMS         MessageSender = 1
	MessageSender_MESSAGE_SENDER_EMAIL       MessageSender = 2
)

// Enum value maps for MessageSender.
var MessageSender_name = map[int32]string{
	0: "MESSAGE_SENDER_UNSPECIFIED",
	1: "MESSAGE_SENDER_SMS",
	2: "MESSAGE_SENDER_EMAIL",
}

var MessageSender_value = map[string]int32{
	"MESSAGE_SENDER_UNSPECIFIED": 0,
	"MESSAGE_SENDER_SMS":         1,
	"MESSAGE_SENDER_EMAIL":       2,
}

func (x MessageSender) String() string {
	s, ok := MessageSender_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED  MessageType = 0
	MessageType_MESSAGE_TYPE_CAPTCHA      MessageType = 1
	MessageType_MESSAGE_TYPE_NOTIFICATION MessageType = 2
)

// Enum value maps for MessageType.
var MessageType_name = map[int32]string{
	0: "MESSAGE_TYPE_UNSPECIFIED",
	1: "MESSAGE_TYPE_CAPTCHA",
	2: "MESSAGE_TYPE_NOTIFICATION",
}

var MessageType_value = map[string]int32{
	"MESSAGE_TYPE_UNSPECIFIED":  0,
	"MESSAGE_TYPE_CAPTCHA":      1,
	"MESSAGE_TYPE_NOTIFICATION": 2,
}

func (x MessageType) String() string {
	s, ok := MessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type MessageStatus int32

const (
	MessageStatus_MESSAGE_STATUS_UNSPECIFIED MessageStatus = 0
	MessageStatus_MESSAGE_STATUS_SENDING     MessageStatus = 1
	MessageStatus_MESSAGE_STATUS_FAILED      MessageStatus = 2
	MessageStatus_MESSAGE_STATUS_SUCCESS     MessageStatus = 3
)

// Enum value maps for MessageStatus.
var MessageStatus_name = map[int32]string{
	0: "MESSAGE_STATUS_UNSPECIFIED",
	1: "MESSAGE_STATUS_SENDING",
	2: "MESSAGE_STATUS_FAILED",
	3: "MESSAGE_STATUS_SUCCESS",
}

var MessageStatus_value = map[string]int32{
	"MESSAGE_STATUS_UNSPECIFIED": 0,
	"MESSAGE_STATUS_SENDING":     1,
	"MESSAGE_STATUS_FAILED":      2,
	"MESSAGE_STATUS_SUCCESS":     3,
}

func (x MessageStatus) String() string {
	s, ok := MessageStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type SmsProvider int32

const (
	SmsProvider_SMS_PROVIDER_UNSPECIFIED SmsProvider = 0
	SmsProvider_SMS_PROVIDER_ALIYUN      SmsProvider = 1
)

// Enum value maps for SmsProvider.
var SmsProvider_name = map[int32]string{
	0: "SMS_PROVIDER_UNSPECIFIED",
	1: "SMS_PROVIDER_ALIYUN",
}

var SmsProvider_value = map[string]int32{
	"SMS_PROVIDER_UNSPECIFIED": 0,
	"SMS_PROVIDER_ALIYUN":      1,
}

func (x SmsProvider) String() string {
	s, ok := SmsProvider_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type EmailProvider int32

const (
	EmailProvider_EMAIL_PROVIDER_UNSPECIFIED EmailProvider = 0
	EmailProvider_EMAIL_PROVIDER_SMTP        EmailProvider = 1
)

// Enum value maps for EmailProvider.
var EmailProvider_name = map[int32]string{
	0: "EMAIL_PROVIDER_UNSPECIFIED",
	1: "EMAIL_PROVIDER_SMTP",
}

var EmailProvider_value = map[string]int32{
	"EMAIL_PROVIDER_UNSPECIFIED": 0,
	"EMAIL_PROVIDER_SMTP":        1,
}

func (x EmailProvider) String() string {
	s, ok := EmailProvider_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type LoginType int32

const (
	LoginType_LOGIN_TYPE_UNSPECIFIED       LoginType = 0
	LoginType_LOGIN_TYPE_USERNAME_PASSWORD LoginType = 1
	LoginType_LOGIN_TYPE_PHONE_PASSWORD    LoginType = 2
	LoginType_LOGIN_TYPE_EMAIL_PASSWORD    LoginType = 3
	LoginType_LOGIN_TYPE_PHONE_CAPTCHA     LoginType = 4
	LoginType_LOGIN_TYPE_EMAIL_CAPTCHA     LoginType = 5
	LoginType_LOGIN_TYPE_WECHAT_CODE       LoginType = 6
)

// Enum value maps for LoginType.
var LoginType_name = map[int32]string{
	0: "LOGIN_TYPE_UNSPECIFIED",
	1: "LOGIN_TYPE_USERNAME_PASSWORD",
	2: "LOGIN_TYPE_PHONE_PASSWORD",
	3: "LOGIN_TYPE_EMAIL_PASSWORD",
	4: "LOGIN_TYPE_PHONE_CAPTCHA",
	5: "LOGIN_TYPE_EMAIL_CAPTCHA",
	6: "LOGIN_TYPE_WECHAT_CODE",
}

var LoginType_value = map[string]int32{
	"LOGIN_TYPE_UNSPECIFIED":       0,
	"LOGIN_TYPE_USERNAME_PASSWORD": 1,
	"LOGIN_TYPE_PHONE_PASSWORD":    2,
	"LOGIN_TYPE_EMAIL_PASSWORD":    3,
	"LOGIN_TYPE_PHONE_CAPTCHA":     4,
	"LOGIN_TYPE_EMAIL_CAPTCHA":     5,
	"LOGIN_TYPE_WECHAT_CODE":       6,
}

func (x LoginType) String() string {
	s, ok := LoginType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type LoginStatus int32

const (
	LoginStatus_LOGIN_STATUS_UNSPECIFIED  LoginStatus = 0
	LoginStatus_LOGIN_STATUS_OK           LoginStatus = 1 // 正常在线
	LoginStatus_LOGIN_STATUS_LOGOUT       LoginStatus = 2 // 主动退出
	LoginStatus_LOGIN_STATUS_EXPIRED      LoginStatus = 3 // 过期
	LoginStatus_LOGIN_STATUS_FORCE_LOGOUT LoginStatus = 4 // 系统强制下线
)

// Enum value maps for LoginStatus.
var LoginStatus_name = map[int32]string{
	0: "LOGIN_STATUS_UNSPECIFIED",
	1: "LOGIN_STATUS_OK",
	2: "LOGIN_STATUS_LOGOUT",
	3: "LOGIN_STATUS_EXPIRED",
	4: "LOGIN_STATUS_FORCE_LOGOUT",
}

var LoginStatus_value = map[string]int32{
	"LOGIN_STATUS_UNSPECIFIED":  0,
	"LOGIN_STATUS_OK":           1,
	"LOGIN_STATUS_LOGOUT":       2,
	"LOGIN_STATUS_EXPIRED":      3,
	"LOGIN_STATUS_FORCE_LOGOUT": 4,
}

func (x LoginStatus) String() string {
	s, ok := LoginStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type Gender int32

const (
	Gender_GENDER_UNSPECIFIED Gender = 0
	Gender_GENDER_MALE        Gender = 1
	Gender_GENDER_FEMALE      Gender = 2
	Gender_GENDER_OTHER       Gender = 255
)

// Enum value maps for Gender.
var Gender_name = map[int32]string{
	0:   "GENDER_UNSPECIFIED",
	1:   "GENDER_MALE",
	2:   "GENDER_FEMALE",
	255: "GENDER_OTHER",
}

var Gender_value = map[string]int32{
	"GENDER_UNSPECIFIED": 0,
	"GENDER_MALE":        1,
	"GENDER_FEMALE":      2,
	"GENDER_OTHER":       255,
}

func (x Gender) String() string {
	s, ok := Gender_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type UserStatus int32

const (
	UserStatus_USER_STATUS_UNSPECIFIED UserStatus = 0
	UserStatus_USER_STATUS_OK          UserStatus = 1
	UserStatus_USER_STATUS_DISABLED    UserStatus = 2
)

// Enum value maps for UserStatus.
var UserStatus_name = map[int32]string{
	0: "USER_STATUS_UNSPECIFIED",
	1: "USER_STATUS_OK",
	2: "USER_STATUS_DISABLED",
}

var UserStatus_value = map[string]int32{
	"USER_STATUS_UNSPECIFIED": 0,
	"USER_STATUS_OK":          1,
	"USER_STATUS_DISABLED":    2,
}

func (x UserStatus) String() string {
	s, ok := UserStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type UserSource int32

const (
	UserSource_USER_SOURCE_UNSPECIFIED     UserSource = 0
	UserSource_USER_SOURCE_WEB             UserSource = 1
	UserSource_USER_SOURCE_APP             UserSource = 2
	UserSource_USER_SOURCE_WECHAT_MINI     UserSource = 3
	UserSource_USER_SOURCE_WECHAT_OFFICIAL UserSource = 4
	UserSource_USER_SOURCE_ADMIN           UserSource = 255
)

// Enum value maps for UserSource.
var UserSource_name = map[int32]string{
	0:   "USER_SOURCE_UNSPECIFIED",
	1:   "USER_SOURCE_WEB",
	2:   "USER_SOURCE_APP",
	3:   "USER_SOURCE_WECHAT_MINI",
	4:   "USER_SOURCE_WECHAT_OFFICIAL",
	255: "USER_SOURCE_ADMIN",
}

var UserSource_value = map[string]int32{
	"USER_SOURCE_UNSPECIFIED":     0,
	"USER_SOURCE_WEB":             1,
	"USER_SOURCE_APP":             2,
	"USER_SOURCE_WECHAT_MINI":     3,
	"USER_SOURCE_WECHAT_OFFICIAL": 4,
	"USER_SOURCE_ADMIN":           255,
}

func (x UserSource) String() string {
	s, ok := UserSource_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
