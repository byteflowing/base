// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package base

import (
	"github.com/byteflowing/base/biz/config"
	"github.com/byteflowing/base/biz/dal"
	"github.com/byteflowing/base/biz/pkg/message"
	"github.com/byteflowing/base/biz/pkg/user"
	"github.com/byteflowing/base/biz/service"
	"github.com/byteflowing/go-common/orm"
	"github.com/byteflowing/go-common/redis"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func New(confFile string) service.Service {
	configConfig := config.New(confFile)
	messageConfig := &configConfig.Message
	ormConfig := configConfig.DB
	db := orm.New(ormConfig)
	query := dal.New(db)
	redisConfig := configConfig.Redis
	redisRedis := redis.New(redisConfig)
	opts := &message.Opts{
		Conf:  messageConfig,
		Db:    query,
		Redis: redisRedis,
	}
	messageMessage := message.New(opts)
	userConfig := &configConfig.User
	userOpts := &user.Opts{
		Conf:    userConfig,
		Db:      query,
		Redis:   redisRedis,
		Message: messageMessage,
	}
	userUser := user.New(userOpts)
	serviceOpts := &service.Opts{
		Conf:    configConfig,
		Message: messageMessage,
		User:    userUser,
	}
	serviceService := service.New(serviceOpts)
	return serviceService
}

func New2(conf *config.Config, orm2 *gorm.DB, redis2 *redis.Redis) service.Service {
	messageConfig := &conf.Message
	query := dal.New(orm2)
	opts := &message.Opts{
		Conf:  messageConfig,
		Db:    query,
		Redis: redis2,
	}
	messageMessage := message.New(opts)
	userConfig := &conf.User
	userOpts := &user.Opts{
		Conf:    userConfig,
		Db:      query,
		Redis:   redis2,
		Message: messageMessage,
	}
	userUser := user.New(userOpts)
	serviceOpts := &service.Opts{
		Conf:    conf,
		Message: messageMessage,
		User:    userUser,
	}
	serviceService := service.New(serviceOpts)
	return serviceService
}

// wire.go:

var providerSet = wire.NewSet(redis.New, orm.New, dal.New, config.New, service.New, message.New, user.New, wire.Struct(new(service.Opts), "*"), wire.Struct(new(user.Opts), "*"), wire.Struct(new(message.Opts), "*"), wire.FieldsOf(new(*config.Config), "DB", "Redis", "Message", "User"))

var providerSet2 = wire.NewSet(dal.New, service.New, message.New, user.New, wire.Struct(new(service.Opts), "*"), wire.Struct(new(user.Opts), "*"), wire.Struct(new(message.Opts), "*"), wire.FieldsOf(new(*config.Config), "User", "Message"))
