// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: config/v1/common.proto

package configv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/byteflowing/base/gen/enums/v1"
	_ "github.com/byteflowing/base/gen/validation/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GlobalId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 生成global id的模式
	// Local 模式只能单机唯一
	Mode v1.GlobalIdMode `protobuf:"varint,1,opt,name=mode,proto3,enum=enums.v1.GlobalIdMode" json:"mode,omitempty"`
	// 单机模式下global_id的起点
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalId) Reset() {
	*x = GlobalId{}
	mi := &file_config_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalId) ProtoMessage() {}

func (x *GlobalId) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalId.ProtoReflect.Descriptor instead.
func (*GlobalId) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *GlobalId) GetMode() v1.GlobalIdMode {
	if x != nil {
		return x.Mode
	}
	return v1.GlobalIdMode(0)
}

func (x *GlobalId) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type ShortId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 字符表
	Alphabet string `protobuf:"bytes,1,opt,name=alphabet,proto3" json:"alphabet,omitempty"`
	// 生成的id最小长度
	MinLength int32 `protobuf:"varint,2,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	// 屏蔽的字母
	BlockList     []string `protobuf:"bytes,3,rep,name=block_list,json=blockList,proto3" json:"block_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShortId) Reset() {
	*x = ShortId{}
	mi := &file_config_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShortId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortId) ProtoMessage() {}

func (x *ShortId) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortId.ProtoReflect.Descriptor instead.
func (*ShortId) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *ShortId) GetAlphabet() string {
	if x != nil {
		return x.Alphabet
	}
	return ""
}

func (x *ShortId) GetMinLength() int32 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *ShortId) GetBlockList() []string {
	if x != nil {
		return x.BlockList
	}
	return nil
}

type WechatCredential struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// appid
	Appid string `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	// secret
	Secret        string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WechatCredential) Reset() {
	*x = WechatCredential{}
	mi := &file_config_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WechatCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatCredential) ProtoMessage() {}

func (x *WechatCredential) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatCredential.ProtoReflect.Descriptor instead.
func (*WechatCredential) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *WechatCredential) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *WechatCredential) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type Wechat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Credentials   []*WechatCredential    `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Wechat) Reset() {
	*x = Wechat{}
	mi := &file_config_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Wechat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wechat) ProtoMessage() {}

func (x *Wechat) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wechat.ProtoReflect.Descriptor instead.
func (*Wechat) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *Wechat) GetCredentials() []*WechatCredential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type DistributedLock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ttl           *durationpb.Duration   `protobuf:"bytes,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Prefix        string                 `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DistributedLock) Reset() {
	*x = DistributedLock{}
	mi := &file_config_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistributedLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributedLock) ProtoMessage() {}

func (x *DistributedLock) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributedLock.ProtoReflect.Descriptor instead.
func (*DistributedLock) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *DistributedLock) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *DistributedLock) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type LogRotation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogFile       string                 `protobuf:"bytes,1,opt,name=log_file,json=logFile,proto3" json:"log_file,omitempty"`           // 文件名
	MaxSize       uint32                 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`          // 文件大小，单位M
	MaxAge        uint32                 `protobuf:"varint,3,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`             // 最长保留天数
	MaxBackups    uint32                 `protobuf:"varint,4,opt,name=max_backups,json=maxBackups,proto3" json:"max_backups,omitempty"` // 最多保留分数
	Compress      bool                   `protobuf:"varint,5,opt,name=compress,proto3" json:"compress,omitempty"`                       // 是否启用压缩
	LocalTime     bool                   `protobuf:"varint,6,opt,name=local_time,json=localTime,proto3" json:"local_time,omitempty"`    // 是否使用本地时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRotation) Reset() {
	*x = LogRotation{}
	mi := &file_config_v1_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRotation) ProtoMessage() {}

func (x *LogRotation) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRotation.ProtoReflect.Descriptor instead.
func (*LogRotation) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *LogRotation) GetLogFile() string {
	if x != nil {
		return x.LogFile
	}
	return ""
}

func (x *LogRotation) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *LogRotation) GetMaxAge() uint32 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *LogRotation) GetMaxBackups() uint32 {
	if x != nil {
		return x.MaxBackups
	}
	return 0
}

func (x *LogRotation) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *LogRotation) GetLocalTime() bool {
	if x != nil {
		return x.LocalTime
	}
	return false
}

type DbLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 慢日志阈值，单位ms
	SlowThreshold uint32 `protobuf:"varint,1,opt,name=slow_threshold,json=slowThreshold,proto3" json:"slow_threshold,omitempty"`
	// 输出
	// stdout, file
	Out string `protobuf:"bytes,2,opt,name=out,proto3" json:"out,omitempty"`
	// 是否彩色打印日志
	Colorful bool `protobuf:"varint,3,opt,name=colorful,proto3" json:"colorful,omitempty"`
	// 忽略RecordNotFoundError
	IgnoreRecordNotFoundErr bool `protobuf:"varint,4,opt,name=ignore_record_not_found_err,json=ignoreRecordNotFoundErr,proto3" json:"ignore_record_not_found_err,omitempty"`
	// 不在日志中打印参数
	ParameterizedQueries bool `protobuf:"varint,5,opt,name=parameterized_queries,json=parameterizedQueries,proto3" json:"parameterized_queries,omitempty"`
	// 日志级别
	// silent
	// error
	// warn
	// info
	Level string `protobuf:"bytes,6,opt,name=level,proto3" json:"level,omitempty"`
	// 日志轮转，仅当out为file时有效
	Rotation      *LogRotation `protobuf:"bytes,7,opt,name=rotation,proto3" json:"rotation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbLog) Reset() {
	*x = DbLog{}
	mi := &file_config_v1_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbLog) ProtoMessage() {}

func (x *DbLog) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbLog.ProtoReflect.Descriptor instead.
func (*DbLog) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *DbLog) GetSlowThreshold() uint32 {
	if x != nil {
		return x.SlowThreshold
	}
	return 0
}

func (x *DbLog) GetOut() string {
	if x != nil {
		return x.Out
	}
	return ""
}

func (x *DbLog) GetColorful() bool {
	if x != nil {
		return x.Colorful
	}
	return false
}

func (x *DbLog) GetIgnoreRecordNotFoundErr() bool {
	if x != nil {
		return x.IgnoreRecordNotFoundErr
	}
	return false
}

func (x *DbLog) GetParameterizedQueries() bool {
	if x != nil {
		return x.ParameterizedQueries
	}
	return false
}

func (x *DbLog) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *DbLog) GetRotation() *LogRotation {
	if x != nil {
		return x.Rotation
	}
	return nil
}

type DbConn struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ConnMaxLifeTime int32                  `protobuf:"varint,1,opt,name=conn_max_life_time,json=connMaxLifeTime,proto3" json:"conn_max_life_time,omitempty"` // 单位：秒
	MaxIdleTime     int32                  `protobuf:"varint,2,opt,name=max_idle_time,json=maxIdleTime,proto3" json:"max_idle_time,omitempty"`               // 单位：秒
	MaxIdleConnes   int32                  `protobuf:"varint,3,opt,name=max_idle_connes,json=maxIdleConnes,proto3" json:"max_idle_connes,omitempty"`         // 最大空闲连接
	MaxOpenConnes   int32                  `protobuf:"varint,4,opt,name=max_open_connes,json=maxOpenConnes,proto3" json:"max_open_connes,omitempty"`         // 最大打开连接
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DbConn) Reset() {
	*x = DbConn{}
	mi := &file_config_v1_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbConn) ProtoMessage() {}

func (x *DbConn) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbConn.ProtoReflect.Descriptor instead.
func (*DbConn) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{7}
}

func (x *DbConn) GetConnMaxLifeTime() int32 {
	if x != nil {
		return x.ConnMaxLifeTime
	}
	return 0
}

func (x *DbConn) GetMaxIdleTime() int32 {
	if x != nil {
		return x.MaxIdleTime
	}
	return 0
}

func (x *DbConn) GetMaxIdleConnes() int32 {
	if x != nil {
		return x.MaxIdleConnes
	}
	return 0
}

func (x *DbConn) GetMaxOpenConnes() int32 {
	if x != nil {
		return x.MaxOpenConnes
	}
	return 0
}

type DbMysql struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                                       // 数据库地址
	User          string                 `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                                       // 数据库用户名
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                               // 数据库密码
	DbName        string                 `protobuf:"bytes,4,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`                     // 数据库名
	Port          int32                  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`                                      // 端口号
	Charset       string                 `protobuf:"bytes,6,opt,name=charset,proto3" json:"charset,omitempty"`                                 // 字符集
	Location      string                 `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`                               // 时区
	ConnTimeout   int32                  `protobuf:"varint,8,opt,name=conn_timeout,json=connTimeout,proto3" json:"conn_timeout,omitempty"`     // 单位：秒
	ReadTimeout   int32                  `protobuf:"varint,9,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`     // 单位：秒
	WriteTimeout  int32                  `protobuf:"varint,10,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"` // 单位：秒
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbMysql) Reset() {
	*x = DbMysql{}
	mi := &file_config_v1_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbMysql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbMysql) ProtoMessage() {}

func (x *DbMysql) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbMysql.ProtoReflect.Descriptor instead.
func (*DbMysql) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{8}
}

func (x *DbMysql) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DbMysql) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DbMysql) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DbMysql) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DbMysql) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DbMysql) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *DbMysql) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *DbMysql) GetConnTimeout() int32 {
	if x != nil {
		return x.ConnTimeout
	}
	return 0
}

func (x *DbMysql) GetReadTimeout() int32 {
	if x != nil {
		return x.ReadTimeout
	}
	return 0
}

func (x *DbMysql) GetWriteTimeout() int32 {
	if x != nil {
		return x.WriteTimeout
	}
	return 0
}

type DbPostgres struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                         // 数据库地址
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`                        // 端口号
	User          string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`                         // 数据库用户名
	Password      string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                 // 数据库密码
	DbName        string                 `protobuf:"bytes,5,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`       // 数据库名
	SslMode       bool                   `protobuf:"varint,6,opt,name=ssl_mode,json=sslMode,proto3" json:"ssl_mode,omitempty"`   // 是否使用ssl
	TimeZone      string                 `protobuf:"bytes,7,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"` // 时区
	Schema        string                 `protobuf:"bytes,8,opt,name=schema,proto3" json:"schema,omitempty"`                     // schema
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbPostgres) Reset() {
	*x = DbPostgres{}
	mi := &file_config_v1_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbPostgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbPostgres) ProtoMessage() {}

func (x *DbPostgres) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbPostgres.ProtoReflect.Descriptor instead.
func (*DbPostgres) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{9}
}

func (x *DbPostgres) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DbPostgres) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DbPostgres) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DbPostgres) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DbPostgres) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DbPostgres) GetSslMode() bool {
	if x != nil {
		return x.SslMode
	}
	return false
}

func (x *DbPostgres) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *DbPostgres) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

type DbSQLServer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                   // 数据库地址
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`                  // 端口号
	User          string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`                   // 数据库用户名
	Password      string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`           // 数据库密码
	DbName        string                 `protobuf:"bytes,5,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"` // 数据库名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbSQLServer) Reset() {
	*x = DbSQLServer{}
	mi := &file_config_v1_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbSQLServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSQLServer) ProtoMessage() {}

func (x *DbSQLServer) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSQLServer.ProtoReflect.Descriptor instead.
func (*DbSQLServer) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{10}
}

func (x *DbSQLServer) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DbSQLServer) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DbSQLServer) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DbSQLServer) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DbSQLServer) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

type DbSQLite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbPath        string                 `protobuf:"bytes,1,opt,name=db_path,json=dbPath,proto3" json:"db_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbSQLite) Reset() {
	*x = DbSQLite{}
	mi := &file_config_v1_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbSQLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbSQLite) ProtoMessage() {}

func (x *DbSQLite) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbSQLite.ProtoReflect.Descriptor instead.
func (*DbSQLite) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{11}
}

func (x *DbSQLite) GetDbPath() string {
	if x != nil {
		return x.DbPath
	}
	return ""
}

type Db struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 数据库类型
	// "mysql" "postgres" "sqlserver" "sqlite"
	DbType        string       `protobuf:"bytes,1,opt,name=db_type,json=dbType,proto3" json:"db_type,omitempty"`
	Log           *DbLog       `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	Conn          *DbConn      `protobuf:"bytes,3,opt,name=conn,proto3" json:"conn,omitempty"`
	Mysql         *DbMysql     `protobuf:"bytes,4,opt,name=mysql,proto3" json:"mysql,omitempty"`
	Postgres      *DbPostgres  `protobuf:"bytes,5,opt,name=postgres,proto3" json:"postgres,omitempty"`
	Sqlserver     *DbSQLServer `protobuf:"bytes,6,opt,name=sqlserver,proto3" json:"sqlserver,omitempty"`
	Sqlite        *DbSQLite    `protobuf:"bytes,7,opt,name=sqlite,proto3" json:"sqlite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Db) Reset() {
	*x = Db{}
	mi := &file_config_v1_common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Db) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Db) ProtoMessage() {}

func (x *Db) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Db.ProtoReflect.Descriptor instead.
func (*Db) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{12}
}

func (x *Db) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *Db) GetLog() *DbLog {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *Db) GetConn() *DbConn {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *Db) GetMysql() *DbMysql {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *Db) GetPostgres() *DbPostgres {
	if x != nil {
		return x.Postgres
	}
	return nil
}

func (x *Db) GetSqlserver() *DbSQLServer {
	if x != nil {
		return x.Sqlserver
	}
	return nil
}

func (x *Db) GetSqlite() *DbSQLite {
	if x != nil {
		return x.Sqlite
	}
	return nil
}

type Redis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          string                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`                               // 连接地址 e.g. 127.0.0.1:6379
	User          string                 `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                               // 用户名
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                       // 密码
	Db            int32                  `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`                                  // redis db 1 - 16
	Protocol      int32                  `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"`                      // RESP版本：2或者3
	ClientName    string                 `protobuf:"bytes,6,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"` // 客户端名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Redis) Reset() {
	*x = Redis{}
	mi := &file_config_v1_common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_config_v1_common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_config_v1_common_proto_rawDescGZIP(), []int{13}
}

func (x *Redis) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Redis) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Redis) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Redis) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Redis) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

var File_config_v1_common_proto protoreflect.FileDescriptor

const file_config_v1_common_proto_rawDesc = "" +
	"\n" +
	"\x16config/v1/common.proto\x12\tconfig.v1\x1a$validation/v1/predefined_rules.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bbuf/validate/validate.proto\x1a\x15enums/v1/common.proto\"~\n" +
	"\bGlobalId\x127\n" +
	"\x04mode\x18\x01 \x01(\x0e2\x16.enums.v1.GlobalIdModeB\v\xbaH\b\x82\x01\x05\xc8\xe2\xe8\x03\x01R\x04mode\x129\n" +
	"\n" +
	"start_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\"m\n" +
	"\aShortId\x12\x1a\n" +
	"\balphabet\x18\x01 \x01(\tR\balphabet\x12\x1d\n" +
	"\n" +
	"min_length\x18\x02 \x01(\x05R\tminLength\x12'\n" +
	"\n" +
	"block_list\x18\x03 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\tblockList\"@\n" +
	"\x10WechatCredential\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\tR\x05appid\x12\x16\n" +
	"\x06secret\x18\x02 \x01(\tR\x06secret\"Q\n" +
	"\x06Wechat\x12G\n" +
	"\vcredentials\x18\x01 \x03(\v2\x1b.config.v1.WechatCredentialB\b\xbaH\x05\x92\x01\x02\b\x01R\vcredentials\"V\n" +
	"\x0fDistributedLock\x12+\n" +
	"\x03ttl\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x03ttl\x12\x16\n" +
	"\x06prefix\x18\x02 \x01(\tR\x06prefix\"\xb8\x01\n" +
	"\vLogRotation\x12\x19\n" +
	"\blog_file\x18\x01 \x01(\tR\alogFile\x12\x19\n" +
	"\bmax_size\x18\x02 \x01(\rR\amaxSize\x12\x17\n" +
	"\amax_age\x18\x03 \x01(\rR\x06maxAge\x12\x1f\n" +
	"\vmax_backups\x18\x04 \x01(\rR\n" +
	"maxBackups\x12\x1a\n" +
	"\bcompress\x18\x05 \x01(\bR\bcompress\x12\x1d\n" +
	"\n" +
	"local_time\x18\x06 \x01(\bR\tlocalTime\"\x99\x02\n" +
	"\x05DbLog\x12%\n" +
	"\x0eslow_threshold\x18\x01 \x01(\rR\rslowThreshold\x12\x10\n" +
	"\x03out\x18\x02 \x01(\tR\x03out\x12\x1a\n" +
	"\bcolorful\x18\x03 \x01(\bR\bcolorful\x12<\n" +
	"\x1bignore_record_not_found_err\x18\x04 \x01(\bR\x17ignoreRecordNotFoundErr\x123\n" +
	"\x15parameterized_queries\x18\x05 \x01(\bR\x14parameterizedQueries\x12\x14\n" +
	"\x05level\x18\x06 \x01(\tR\x05level\x122\n" +
	"\brotation\x18\a \x01(\v2\x16.config.v1.LogRotationR\brotation\"\xa9\x01\n" +
	"\x06DbConn\x12+\n" +
	"\x12conn_max_life_time\x18\x01 \x01(\x05R\x0fconnMaxLifeTime\x12\"\n" +
	"\rmax_idle_time\x18\x02 \x01(\x05R\vmaxIdleTime\x12&\n" +
	"\x0fmax_idle_connes\x18\x03 \x01(\x05R\rmaxIdleConnes\x12&\n" +
	"\x0fmax_open_connes\x18\x04 \x01(\x05R\rmaxOpenConnes\"\x9b\x02\n" +
	"\aDbMysql\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04user\x18\x02 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x17\n" +
	"\adb_name\x18\x04 \x01(\tR\x06dbName\x12\x12\n" +
	"\x04port\x18\x05 \x01(\x05R\x04port\x12\x18\n" +
	"\acharset\x18\x06 \x01(\tR\acharset\x12\x1a\n" +
	"\blocation\x18\a \x01(\tR\blocation\x12!\n" +
	"\fconn_timeout\x18\b \x01(\x05R\vconnTimeout\x12!\n" +
	"\fread_timeout\x18\t \x01(\x05R\vreadTimeout\x12#\n" +
	"\rwrite_timeout\x18\n" +
	" \x01(\x05R\fwriteTimeout\"\xcd\x01\n" +
	"\n" +
	"DbPostgres\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x17\n" +
	"\adb_name\x18\x05 \x01(\tR\x06dbName\x12\x19\n" +
	"\bssl_mode\x18\x06 \x01(\bR\asslMode\x12\x1b\n" +
	"\ttime_zone\x18\a \x01(\tR\btimeZone\x12\x16\n" +
	"\x06schema\x18\b \x01(\tR\x06schema\"~\n" +
	"\vDbSQLServer\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x17\n" +
	"\adb_name\x18\x05 \x01(\tR\x06dbName\"#\n" +
	"\bDbSQLite\x12\x17\n" +
	"\adb_path\x18\x01 \x01(\tR\x06dbPath\"\xa8\x02\n" +
	"\x02Db\x12\x17\n" +
	"\adb_type\x18\x01 \x01(\tR\x06dbType\x12\"\n" +
	"\x03log\x18\x02 \x01(\v2\x10.config.v1.DbLogR\x03log\x12%\n" +
	"\x04conn\x18\x03 \x01(\v2\x11.config.v1.DbConnR\x04conn\x12(\n" +
	"\x05mysql\x18\x04 \x01(\v2\x12.config.v1.DbMysqlR\x05mysql\x121\n" +
	"\bpostgres\x18\x05 \x01(\v2\x15.config.v1.DbPostgresR\bpostgres\x124\n" +
	"\tsqlserver\x18\x06 \x01(\v2\x16.config.v1.DbSQLServerR\tsqlserver\x12+\n" +
	"\x06sqlite\x18\a \x01(\v2\x13.config.v1.DbSQLiteR\x06sqlite\"\x98\x01\n" +
	"\x05Redis\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12\x12\n" +
	"\x04user\x18\x02 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpassword\x12\x0e\n" +
	"\x02db\x18\x04 \x01(\x05R\x02db\x12\x1a\n" +
	"\bprotocol\x18\x05 \x01(\x05R\bprotocol\x12\x1f\n" +
	"\vclient_name\x18\x06 \x01(\tR\n" +
	"clientNameB\x95\x01\n" +
	"\rcom.config.v1B\vCommonProtoP\x01Z2github.com/byteflowing/base/gen/config/v1;configv1\xa2\x02\x03CXX\xaa\x02\tConfig.V1\xca\x02\tConfig\\V1\xe2\x02\x15Config\\V1\\GPBMetadata\xea\x02\n" +
	"Config::V1b\x06proto3"

var (
	file_config_v1_common_proto_rawDescOnce sync.Once
	file_config_v1_common_proto_rawDescData []byte
)

func file_config_v1_common_proto_rawDescGZIP() []byte {
	file_config_v1_common_proto_rawDescOnce.Do(func() {
		file_config_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_v1_common_proto_rawDesc), len(file_config_v1_common_proto_rawDesc)))
	})
	return file_config_v1_common_proto_rawDescData
}

var file_config_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_config_v1_common_proto_goTypes = []any{
	(*GlobalId)(nil),              // 0: config.v1.GlobalId
	(*ShortId)(nil),               // 1: config.v1.ShortId
	(*WechatCredential)(nil),      // 2: config.v1.WechatCredential
	(*Wechat)(nil),                // 3: config.v1.Wechat
	(*DistributedLock)(nil),       // 4: config.v1.DistributedLock
	(*LogRotation)(nil),           // 5: config.v1.LogRotation
	(*DbLog)(nil),                 // 6: config.v1.DbLog
	(*DbConn)(nil),                // 7: config.v1.DbConn
	(*DbMysql)(nil),               // 8: config.v1.DbMysql
	(*DbPostgres)(nil),            // 9: config.v1.DbPostgres
	(*DbSQLServer)(nil),           // 10: config.v1.DbSQLServer
	(*DbSQLite)(nil),              // 11: config.v1.DbSQLite
	(*Db)(nil),                    // 12: config.v1.Db
	(*Redis)(nil),                 // 13: config.v1.Redis
	(v1.GlobalIdMode)(0),          // 14: enums.v1.GlobalIdMode
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 16: google.protobuf.Duration
}
var file_config_v1_common_proto_depIdxs = []int32{
	14, // 0: config.v1.GlobalId.mode:type_name -> enums.v1.GlobalIdMode
	15, // 1: config.v1.GlobalId.start_time:type_name -> google.protobuf.Timestamp
	2,  // 2: config.v1.Wechat.credentials:type_name -> config.v1.WechatCredential
	16, // 3: config.v1.DistributedLock.ttl:type_name -> google.protobuf.Duration
	5,  // 4: config.v1.DbLog.rotation:type_name -> config.v1.LogRotation
	6,  // 5: config.v1.Db.log:type_name -> config.v1.DbLog
	7,  // 6: config.v1.Db.conn:type_name -> config.v1.DbConn
	8,  // 7: config.v1.Db.mysql:type_name -> config.v1.DbMysql
	9,  // 8: config.v1.Db.postgres:type_name -> config.v1.DbPostgres
	10, // 9: config.v1.Db.sqlserver:type_name -> config.v1.DbSQLServer
	11, // 10: config.v1.Db.sqlite:type_name -> config.v1.DbSQLite
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_config_v1_common_proto_init() }
func file_config_v1_common_proto_init() {
	if File_config_v1_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_v1_common_proto_rawDesc), len(file_config_v1_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_v1_common_proto_goTypes,
		DependencyIndexes: file_config_v1_common_proto_depIdxs,
		MessageInfos:      file_config_v1_common_proto_msgTypes,
	}.Build()
	File_config_v1_common_proto = out.File
	file_config_v1_common_proto_goTypes = nil
	file_config_v1_common_proto_depIdxs = nil
}
