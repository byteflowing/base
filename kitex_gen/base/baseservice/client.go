// Code generated by Kitex v0.14.1. DO NOT EDIT.

package baseservice

import (
	"context"
	base "github.com/byteflowing/base/kitex_gen/base"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SendCaptcha(ctx context.Context, Req *base.SendCaptchaReq, callOptions ...callopt.Option) (r *base.SendCaptchaResp, err error)
	VerifyCaptcha(ctx context.Context, Req *base.VerifyCaptchaReq, callOptions ...callopt.Option) (r *base.VerifyCaptchaResp, err error)
	PagingGetSmsMessages(ctx context.Context, Req *base.PagingGetSmsMessagesReq, callOptions ...callopt.Option) (r *base.PagingGetSmsMessagesResp, err error)
	SendLoginCaptcha(ctx context.Context, Req *base.SendLoginCaptchaReq, callOptions ...callopt.Option) (r *base.SendLoginCaptchaResp, err error)
	Login(ctx context.Context, Req *base.LoginReq, callOptions ...callopt.Option) (r *base.LoginResp, err error)
	Logout(ctx context.Context, Req *base.LogoutReq, callOptions ...callopt.Option) (r *base.LogoutResp, err error)
	ForceLogoutBySessionId(ctx context.Context, Req *base.ForceLogoutBySessionIdReq, callOptions ...callopt.Option) (r *base.ForceLogoutBySessionIdResp, err error)
	RefreshToken(ctx context.Context, Req *base.RefreshTokenReq, callOptions ...callopt.Option) (r *base.RefreshTokenResp, err error)
	VerifyToken(ctx context.Context, Req *base.VerifyTokenReq, callOptions ...callopt.Option) (r *base.VerifyTokenResp, err error)
	AddUser(ctx context.Context, Req *base.AddUserReq, callOptions ...callopt.Option) (r *base.AddUserResp, err error)
	BatchAddUsers(ctx context.Context, Req *base.BatchAddUsersReq, callOptions ...callopt.Option) (r *base.BatchAddUsersResp, err error)
	UpdateUser(ctx context.Context, Req *base.UpdateUserReq, callOptions ...callopt.Option) (r *base.UpdateUserResp, err error)
	DeleteUser(ctx context.Context, Req *base.DeleteUserReq, callOptions ...callopt.Option) (r *base.DeleteUserResp, err error)
	BatchDeleteUsers(ctx context.Context, Req *base.BatchDeleteUsersReq, callOptions ...callopt.Option) (r *base.BatchDeleteUsersResp, err error)
	GetUserByNumber(ctx context.Context, Req *base.GetUserByNumberReq, callOptions ...callopt.Option) (r *base.GetUserByNumberResp, err error)
	PagingGetUsers(ctx context.Context, Req *base.PagingGetUsersReq, callOptions ...callopt.Option) (r *base.PagingGetUsersResp, err error)
	GetUserLoginLogs(ctx context.Context, Req *base.GetUserLoginLogsReq, callOptions ...callopt.Option) (r *base.GetUserLoginLogsResp, err error)
	PagingGetLoginLogs(ctx context.Context, Req *base.PagingGetLoginLogsReq, callOptions ...callopt.Option) (r *base.PagingGetLoginLogsResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kBaseServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kBaseServiceClient struct {
	*kClient
}

func (p *kBaseServiceClient) SendCaptcha(ctx context.Context, Req *base.SendCaptchaReq, callOptions ...callopt.Option) (r *base.SendCaptchaResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendCaptcha(ctx, Req)
}

func (p *kBaseServiceClient) VerifyCaptcha(ctx context.Context, Req *base.VerifyCaptchaReq, callOptions ...callopt.Option) (r *base.VerifyCaptchaResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VerifyCaptcha(ctx, Req)
}

func (p *kBaseServiceClient) PagingGetSmsMessages(ctx context.Context, Req *base.PagingGetSmsMessagesReq, callOptions ...callopt.Option) (r *base.PagingGetSmsMessagesResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PagingGetSmsMessages(ctx, Req)
}

func (p *kBaseServiceClient) SendLoginCaptcha(ctx context.Context, Req *base.SendLoginCaptchaReq, callOptions ...callopt.Option) (r *base.SendLoginCaptchaResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendLoginCaptcha(ctx, Req)
}

func (p *kBaseServiceClient) Login(ctx context.Context, Req *base.LoginReq, callOptions ...callopt.Option) (r *base.LoginResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, Req)
}

func (p *kBaseServiceClient) Logout(ctx context.Context, Req *base.LogoutReq, callOptions ...callopt.Option) (r *base.LogoutResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Logout(ctx, Req)
}

func (p *kBaseServiceClient) ForceLogoutBySessionId(ctx context.Context, Req *base.ForceLogoutBySessionIdReq, callOptions ...callopt.Option) (r *base.ForceLogoutBySessionIdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ForceLogoutBySessionId(ctx, Req)
}

func (p *kBaseServiceClient) RefreshToken(ctx context.Context, Req *base.RefreshTokenReq, callOptions ...callopt.Option) (r *base.RefreshTokenResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RefreshToken(ctx, Req)
}

func (p *kBaseServiceClient) VerifyToken(ctx context.Context, Req *base.VerifyTokenReq, callOptions ...callopt.Option) (r *base.VerifyTokenResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VerifyToken(ctx, Req)
}

func (p *kBaseServiceClient) AddUser(ctx context.Context, Req *base.AddUserReq, callOptions ...callopt.Option) (r *base.AddUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddUser(ctx, Req)
}

func (p *kBaseServiceClient) BatchAddUsers(ctx context.Context, Req *base.BatchAddUsersReq, callOptions ...callopt.Option) (r *base.BatchAddUsersResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchAddUsers(ctx, Req)
}

func (p *kBaseServiceClient) UpdateUser(ctx context.Context, Req *base.UpdateUserReq, callOptions ...callopt.Option) (r *base.UpdateUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateUser(ctx, Req)
}

func (p *kBaseServiceClient) DeleteUser(ctx context.Context, Req *base.DeleteUserReq, callOptions ...callopt.Option) (r *base.DeleteUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteUser(ctx, Req)
}

func (p *kBaseServiceClient) BatchDeleteUsers(ctx context.Context, Req *base.BatchDeleteUsersReq, callOptions ...callopt.Option) (r *base.BatchDeleteUsersResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchDeleteUsers(ctx, Req)
}

func (p *kBaseServiceClient) GetUserByNumber(ctx context.Context, Req *base.GetUserByNumberReq, callOptions ...callopt.Option) (r *base.GetUserByNumberResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserByNumber(ctx, Req)
}

func (p *kBaseServiceClient) PagingGetUsers(ctx context.Context, Req *base.PagingGetUsersReq, callOptions ...callopt.Option) (r *base.PagingGetUsersResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PagingGetUsers(ctx, Req)
}

func (p *kBaseServiceClient) GetUserLoginLogs(ctx context.Context, Req *base.GetUserLoginLogsReq, callOptions ...callopt.Option) (r *base.GetUserLoginLogsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserLoginLogs(ctx, Req)
}

func (p *kBaseServiceClient) PagingGetLoginLogs(ctx context.Context, Req *base.PagingGetLoginLogsReq, callOptions ...callopt.Option) (r *base.PagingGetLoginLogsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PagingGetLoginLogs(ctx, Req)
}
