syntax = "proto3";

package user.v1;

import "enums/v1/user.proto";
import "enums/v1/message.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";
import "validation/v1/predefined_rules.proto";
import "common/v1/common.proto";
import "google/type/date.proto";
import "msg/v1/captcha.proto";

message UserProfile {
  int64 uid = 1; // userid
  enums.v1.AuthType auth_type = 2; // 认证类型
  string appid = 3; // appid
  string openid = 4; // openid
  string unionid = 5; // unionid
  string session_id = 6; // session_id
  google.protobuf.Any extra = 7; // 调用方自定义字段
}

message UserInfo {
  int64 uid = 1; // 用户id
  string number = 2; // 用户编号
  enums.v1.UserStatus status = 3; // 状态
  optional string name = 4; // 姓名
  optional string alias = 5; // 别名
  optional string avatar = 6; // 头像
  optional enums.v1.Gender gender = 7; // 性别
  optional google.type.Date birthday = 8; // 生日
  optional common.v1.PhoneNumber phone_number = 9; // 手机
  optional string email = 10;// 邮箱
  optional common.v1.AdminRegion region = 11; // 行政区域
  optional string addr = 12; // 详细地址
  optional string ext = 13; // 扩展字段，json格式，（由业务方自定义）
  google.protobuf.Timestamp password_updated_at = 14; // 上次密码修改时间
}

message SendCaptchaReq {
  msg.v1.SendCaptchaReq captcha_params = 2;
}

message SendCaptchaResp {
  message Data {
    // 验证码存取的key，使用这个key在kv存储中找验证码
    string token = 1;
    // 如果报错，这里有限制的原因
    optional common.v1.LimitRule limit = 2;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}

message VerifyCaptchaReq {
  string biz = 1;
  msg.v1.VerifyCaptchaReq param = 2;
}

message VerifyCaptchaResp {
  message Data {
    string token = 1;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}

message SignUpReq {
  // 注册方式
  enums.v1.AuthType auth_type = 1 [
    (buf.validate.field).enum = {
      in: [4, 5]
    }
  ];
  // 用户编码，全局唯一, 数据库中定义的有唯一索引
  optional string number = 2 [(buf.validate.field).string.(validation.v1.required_20) = true];
  // 用户姓名
  optional string name = 3 [(buf.validate.field).string.(validation.v1.optional_30) = true];
  // 别名
  optional string alias = 4 [(buf.validate.field).string.(validation.v1.optional_20) = true];
  // 密码
  optional string password = 5 [(buf.validate.field).string.(validation.v1.optional_20) = true];
  // 头像
  optional string avatar = 6 [(buf.validate.field).string.(validation.v1.optional_255) = true];
  // 性别
  optional enums.v1.Gender gender = 7 [(buf.validate.field).enum.(validation.v1.not_unspecified) = true];
  // 生日
  optional google.type.Date birthday = 8;
  // 手机
  optional common.v1.PhoneNumber phone = 9;
  // 邮箱
  optional string email = 10 [(buf.validate.field).string.(validation.v1.optional_30) = true];
  // 行政区域
  optional common.v1.AdminRegion region = 11;
  // 详细地址
  optional string addr = 12 [(buf.validate.field).string.(validation.v1.optional_100) = true];
  // 状态
  optional enums.v1.UserStatus status = 13 [(buf.validate.field).enum.(validation.v1.not_unspecified) = true];
  // 用户类型（由业务方自定义）
  optional int32 type = 14 [(buf.validate.field).int32.gt = 0];
  // 用户等级（由业务方自定义）
  optional int32 level = 15 [(buf.validate.field).int32.gt = 0];
  // 用户来源
  optional enums.v1.UserSource source = 16 [(buf.validate.field).enum.(validation.v1.not_unspecified) = true];
  // 注册设备ip
  optional string ip = 17 [(buf.validate.field).string.ip = true];
  // 注册UA
  optional string agent = 18 [(buf.validate.field).string.(validation.v1.optional_255) = true];
  // 注册设备信息
  optional string device = 19 [(buf.validate.field).string.(validation.v1.optional_255) = true];
  // 扩展字段，json格式，（由业务方自定义）
  optional string ext = 20;
  // 验证码
  string captcha = 21 [(buf.validate.field).string.(validation.v1.required_10) = true];
  // 验证码token
  string captcha_token = 22 [(buf.validate.field).string.uuid = true];
  string biz = 255;
}

message SignUpResp {
  message Data {
    UserInfo user_info = 1;
    optional common.v1.LimitRule rule = 2;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}

message SignInReq {
  // 认证类型，例如 "password", "email", "wechat"
  enums.v1.AuthType auth_type = 1 [(buf.validate.field).enum.(validation.v1.not_unspecified) = true];
  // 用户名、邮箱等
  // 根据AuthType这里可以是邮箱，账号，验证码token，appid等
  string identifier = 2 [(buf.validate.field).string.(validation.v1.required_50) = true];
  // 密码、验证码等
  // 如果是验证码登录，这里是验证码
  // 如果是微信登录这里是code
  string credential = 3 [(buf.validate.field).string.(validation.v1.required_50) = true];
  // 手机号,跟手机登录有关的手机号码必须填在这里
  common.v1.PhoneNumber phone_number = 4;
  // jwt除标准字段外的自定义字段
  google.protobuf.Any extra_jwt_claims = 5;
  // 如果通过验证码登录，这里是验证码在redis中的key
  optional string captcha_token = 6 [(buf.validate.field).string.uuid = true];
  // 登录 IP
  optional string ip = 7 [(buf.validate.field).string.ip = true];
  // 用户位置
  optional string location = 8 [(buf.validate.field).string.(validation.v1.optional_255) = true];
  // UA 信息
  optional string user_agent = 9 [(buf.validate.field).string.(validation.v1.optional_255) = true];
  // 设备信息
  optional string device = 10 [(buf.validate.field).string.(validation.v1.optional_255) = true];
  string biz = 255;
}

message SignInResp {
  message Data {
    // jwt token
    // uid 用户id（自定义字段）
    // type token类型（自定义字段：access，refresh）
    // auth_type 认证类型
    // appid 客户端id（如微信的appid，目前仅微信登录有值）
    // openid 微信登录的openid
    // unionid 微信登录的unionid(若有)
    // extra 调用方添加的自定义字段
    // iss 签发方
    // sub user表number字段
    // aud 暂时不用
    // exp 过期时间秒级时间戳
    // nbf 暂时使用签发时间填充(立刻生效)秒级时间戳
    // iat 签发时间秒级时间戳
    // jti 使用uuid填充代表session_id
    string access_token = 1;
    string refresh_token = 2;
    UserInfo user_info = 3;
    optional common.v1.LimitRule rule = 4;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 5;
}

message SignOutReq {
  string session_id = 1 [(buf.validate.field).string.uuid = true];
  enums.v1.SessionStatus reason = 2 [
    (buf.validate.field).enum = {
      not_in: [0, 1]
    }
  ];
  enums.v1.AuthType auth_type = 3 [(buf.validate.field).enum.(validation.v1.not_unspecified) = true];
}

message SignOutResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message SignOutByUidReq {
  // token中的uid
  int64 uid = 1 [(buf.validate.field).int64.gt = 0];
  enums.v1.SessionStatus reason = 2 [(buf.validate.field).enum.(validation.v1.not_unspecified) = true];
}

message SignOutByUidResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message RefreshReq {
  // 刷新token
  string refresh_token = 1 [(buf.validate.field).required = true];
  // jwt除标准字段外的自定义字段
  google.protobuf.Any extra_jwt_claims = 2;
}

message RefreshResp {
  message Data {
    // 新的access_token
    string new_access_token = 1;
    // 新的refresh_token
    string new_refresh_token = 2;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}

message ChangePasswordReq {
  int64 uid = 1;
  string current_session_id = 2;
  string old_password = 3;
  string new_password = 4;
}

message ChangePasswordResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ResetPasswordReq {
  string reset_token = 1;
  string new_password = 2;
}

message ResetPasswordResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangePhoneReq {
  string change_token = 1;
  common.v1.PhoneNumber phone = 2;
  string captcha_token = 3;
  string captcha = 4;
}

message ChangePhoneResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeEmailReq {
  enums.v1.MessageSenderType sender = 1;
  string change_token = 2;
  string new_email = 3;
  string captcha_token = 4;
  string captcha = 5;
}

message ChangeEmailResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserStatusResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserAvatarReq {
  int64 uid = 1;
  string avatar = 2;
}

message ChangeUserAvatarResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserGenderReq {
  int64 uid = 1;
  enums.v1.Gender gender = 2;
}

message ChangeUserGenderResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserBirthdayReq {
  int64 uid = 1;
  google.type.Date birthday = 2;
}

message ChangeUserBirthdayResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserNameReq {
  int64 uid = 1;
  string name = 2;
}

message ChangeUserNameResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserAliasReq {
  int64 uid = 1;
  string alias = 2;
}

message ChangeUserAliasResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserNumberReq {
  int64 uid = 1;
  string number = 2;
}

message ChangeUserNumberResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserAddressReq {
  int64 uid = 1;
  string country_code = 2;
  string province_code = 3;
  string city_code = 4;
  string district_code = 5;
  string addr = 6;
}

message ChangeUserAddressResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserTypeReq {
  int64 uid = 1;
  int32 type = 2;
}

message ChangeUserTypeResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserLevelReq {
  int64 uid = 1;
  int32 level = 2;
}

message ChangeUserLevelResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserExtReq {
  int64 uid = 1;
  string ext = 2;
}

message ChangeUserExtResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message VerifyPhoneReq {
  int64 uid = 1;
  common.v1.PhoneNumber phone = 2;
  string captcha_token = 3;
  string captcha = 4;
}

message VerifyPhoneResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message VerifyEmailReq {
  int64 uid = 1;
  string email = 2;
  string captcha_token = 3;
  string captcha = 4;
}

message VerifyEmailResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message ChangeUserStatusReq {
  int64 uid = 1;
  enums.v1.UserStatus status = 2;
}

message AddSessionToBlockListReq {
  // 访问token的jti
  string access_session_id = 1 [(buf.validate.field).string.uuid = true];
  // 是否同时把refresh的jti加入黑名单
  bool block_refresh = 2;
}

message AddSessionToBlockListResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message VerifyTokenReq {
  enums.v1.TokenType type = 1;
  string token = 2 [(buf.validate.field).required = true];
}

message VerifyTokenResp {
  message Data {
    optional UserProfile user_info = 1;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}

message SignInLog {
  // 主键id
  int64 id = 1;
  // uid
  int64 uid = 2;
  // 认证类型
  enums.v1.AuthType type = 3;
  // 登录状态
  enums.v1.SessionStatus status = 4;
  // 访问token中的jti
  string access_token_id = 5;
  // 刷新token中的jti
  string refresh_token_id = 6;
  // 登录时ip
  optional string ip = 7;
  // 登录时位置
  optional string location = 8;
  // 登录的agent
  optional string agent = 9;
  // 登录设备
  optional string device = 10;
  // 删除时间
  optional int64 deleted_at = 11;
  // 访问token过期时间，毫秒时间戳
  google.protobuf.Timestamp access_expired_at = 12;
  // 刷新token过期时间，毫秒时间戳
  google.protobuf.Timestamp refresh_expired_at = 13;
  // 更新时间
  google.protobuf.Timestamp updated_at = 14;
  // 创建时间
  google.protobuf.Timestamp created_at = 15;
}

message GetActiveSignInLogsReq {
  int64 uid = 1 [(buf.validate.field).int64.gt = 0];
}

message GetActiveSignInLogsResp {
  message Data {
    repeated SignInLog logs = 1;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}

message PagingGetSignInLogsReq {
  // 第几页
  int32 page = 1 [(buf.validate.field).int32.gt = 0];
  // 每页数据量
  int32 size = 2 [
    (buf.validate.field).int32 = {
      gt: 0
      lte: 100
    }
  ];
  // 是否正序
  bool asc = 3;
  // 用户id
  optional int64 uid = 4 [(buf.validate.field).int64.gt = 0];
  // 认证类型
  repeated enums.v1.AuthType types = 5 [(buf.validate.field).repeated.items.enum.(validation.v1.not_unspecified) = true];
  // 登录状态
  repeated enums.v1.SessionStatus statuses = 6 [(buf.validate.field).repeated.items.enum.(validation.v1.not_unspecified) = true];
  string biz = 255;
}

message PagingGetSignInLogsResp {
  message Data {
    repeated SignInLog logs = 1;
    uint32 page = 2;
    uint32 size = 3;
    uint64 total = 4;
    uint32 total_pages = 5;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}
