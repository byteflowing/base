syntax = "proto3";

package user.v1;

import "enums/v1/user.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";
import "validation/v1/predefined_rules.proto";
import "common/v1/common.proto";

message UserProfile {
  // userid
  int64 uid = 1;
  // 认证类型
  enums.v1.AuthType auth_type = 2;
  // appid
  string appid = 3;
  // openid
  string openid = 4;
  // unionid
  string unionid = 5;
  // session_id
  string session_id = 6;
  // 调用方自定义字段
  google.protobuf.Any extra = 7;
}

message SignInLog {
  // 主键id
  int64 id = 1;
  // uid
  int64 uid = 2;
  // 认证类型
  enums.v1.AuthType type = 3;
  // 登录状态
  enums.v1.SessionStatus status = 4;
  // 访问token中的jti
  string access_token_id = 5;
  // 刷新token中的jti
  string refresh_token_id = 6;
  // 登录时ip
  optional string ip = 7;
  // 登录时位置
  optional string location = 8;
  // 登录的agent
  optional string agent = 9;
  // 登录设备
  optional string device = 10;
  // 删除时间
  optional int64 deleted_at = 11;
  // 访问token过期时间，毫秒时间戳
  google.protobuf.Timestamp access_expired_at = 12;
  // 刷新token过期时间，毫秒时间戳
  google.protobuf.Timestamp refresh_expired_at = 13;
  // 更新时间
  google.protobuf.Timestamp updated_at = 14;
  // 创建时间
  google.protobuf.Timestamp created_at = 15;
}

message SignInReq {
  // 认证类型，例如 "password", "email", "wechat"
  enums.v1.AuthType auth_type = 1 [(buf.validate.field).enum.(validation.v1.not_unspecified) = true];
  // 用户名、邮箱等
  // 根据AuthType这里可以是邮箱，账号，验证码token，appid等
  string identifier = 2 [(buf.validate.field).string.(validation.v1.required_50) = true];
  // 密码、验证码等
  // 如果是验证码登录，这里是验证码
  // 如果是微信登录这里是code
  string credential = 3 [(buf.validate.field).string.(validation.v1.required_50) = true];
  // 手机号,跟手机登录有关的手机号码必须填在这里
  common.v1.PhoneNumber phone_number = 4;
  // jwt除标准字段外的自定义字段
  google.protobuf.Any extra_jwt_claims = 5;
  // 如果通过验证码登录，这里是验证码在redis中的key
  optional string captcha_token = 6 [(buf.validate.field).string.uuid = true];
  // 登录 IP
  optional string ip = 7 [(buf.validate.field).string.ip = true];
  // 用户位置
  optional string location = 8 [(buf.validate.field).string.(validation.v1.optional_255) = true];
  // UA 信息
  optional string user_agent = 9 [(buf.validate.field).string.(validation.v1.optional_255) = true];
  // 设备信息
  optional string device = 10 [(buf.validate.field).string.(validation.v1.optional_255) = true];
}

message SignInResp {
  message Data {
    // jwt token
    // uid 用户id（自定义字段）
    // type token类型（自定义字段：access，refresh）
    // auth_type 认证类型
    // appid 客户端id（如微信的appid，目前仅微信登录有值）
    // openid 微信登录的openid
    // unionid 微信登录的unionid(若有)
    // extra 调用方添加的自定义字段
    // iss 签发方
    // sub user表number字段
    // aud 暂时不用
    // exp 过期时间秒级时间戳
    // nbf 暂时使用签发时间填充(立刻生效)秒级时间戳
    // iat 签发时间秒级时间戳
    // jti 使用uuid填充代表session_id
    string access_token = 1;
    string refresh_token = 2;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  optional common.v1.LimitRule rule = 4;
  Data data = 5;
}

message RefreshReq {
  // 刷新token
  string refresh_token = 1 [(buf.validate.field).required = true];
}

message RefreshResp {
  message Data {
    // 新的access_token
    string new_access_token = 1;
    // 新的refresh_token
    string new_refresh_token = 2;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}

message SignOutByUidReq {
  // token中的uid
  int64 uid = 1 [(buf.validate.field).int64.gt = 0];
  enums.v1.SessionStatus reason = 2 [(buf.validate.field).enum.(validation.v1.not_unspecified) = true];
}

message SignOutByUidResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message SignOutBySessionIdReq {
  // token中的jti
  string session_id = 1 [(buf.validate.field).string.uuid = true];
  enums.v1.SessionStatus reason = 2 [(buf.validate.field).enum.(validation.v1.not_unspecified) = true];
}

message SignOutBySessionIdResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message AddSessionToBlockListReq {
  // 访问token的jti
  string access_session_id = 1 [(buf.validate.field).string.uuid = true];
  // 是否同时把refresh的jti加入黑名单
  bool block_refresh = 2;
}

message AddSessionToBlockListResp {
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
}

message VerifyTokenReq {
  string token = 1 [(buf.validate.field).required = true];
}

message VerifyTokenResp {
  message Data {
    optional UserProfile user_info = 1;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}

message GetActiveSignInLogsReq {
  int64 uid = 1 [(buf.validate.field).int64.gt = 0];
}

message GetActiveSignInLogsResp {
  message Data {
    repeated SignInLog logs = 1;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}

message PagingGetSignInLogsReq {
  // 第几页
  int32 page = 1 [(buf.validate.field).int32.gt = 0];
  // 每页数据量
  int32 size = 2 [
    (buf.validate.field).int32 = {
      gt: 0
      lte: 100
    }
  ];
  // 是否正序
  bool asc = 3;
  // 用户id
  optional int64 uid = 4 [(buf.validate.field).int64.gt = 0];
  // 认证类型
  repeated enums.v1.AuthType types = 5 [(buf.validate.field).repeated.items.enum.(validation.v1.not_unspecified) = true];
  // 登录状态
  repeated enums.v1.SessionStatus statuses = 6 [(buf.validate.field).repeated.items.enum.(validation.v1.not_unspecified) = true];
}

message PagingGetSignInLogsResp {
  message Data {
    repeated SignInLog logs = 1;
    uint32 page = 2;
    uint32 size = 3;
    uint64 total = 4;
    uint32 total_pages = 5;
  }
  // 正常返回0，错误返回非0
  uint32 err_code = 1;
  // 正常返回OK, 错误返回错误内容
  string err_msg = 2;
  // 开发模式，返回详细错误信息
  string err_detail = 3;
  Data data = 4;
}
