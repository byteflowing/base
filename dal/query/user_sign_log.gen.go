// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/byteflowing/base/dal/model"
)

func newUserSignLog(db *gorm.DB, opts ...gen.DOOption) userSignLog {
	_userSignLog := userSignLog{}

	_userSignLog.userSignLogDo.UseDB(db, opts...)
	_userSignLog.userSignLogDo.UseModel(&model.UserSignLog{})

	tableName := _userSignLog.userSignLogDo.TableName()
	_userSignLog.ALL = field.NewAsterisk(tableName)
	_userSignLog.ID = field.NewInt64(tableName, "id")
	_userSignLog.UID = field.NewInt64(tableName, "uid")
	_userSignLog.AccessSessionID = field.NewString(tableName, "access_session_id")
	_userSignLog.RefreshSessionID = field.NewString(tableName, "refresh_session_id")
	_userSignLog.Type = field.NewInt16(tableName, "type")
	_userSignLog.Status = field.NewInt16(tableName, "status")
	_userSignLog.IP = field.NewString(tableName, "ip")
	_userSignLog.Location = field.NewString(tableName, "location")
	_userSignLog.Agent = field.NewString(tableName, "agent")
	_userSignLog.Device = field.NewString(tableName, "device")
	_userSignLog.AccessExpiredAt = field.NewInt64(tableName, "access_expired_at")
	_userSignLog.RefreshExpiredAt = field.NewInt64(tableName, "refresh_expired_at")
	_userSignLog.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_userSignLog.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userSignLog.CreatedAt = field.NewInt64(tableName, "created_at")

	_userSignLog.fillFieldMap()

	return _userSignLog
}

type userSignLog struct {
	userSignLogDo userSignLogDo

	ALL              field.Asterisk
	ID               field.Int64
	UID              field.Int64
	AccessSessionID  field.String
	RefreshSessionID field.String
	Type             field.Int16
	Status           field.Int16
	IP               field.String
	Location         field.String
	Agent            field.String
	Device           field.String
	AccessExpiredAt  field.Int64
	RefreshExpiredAt field.Int64
	DeletedAt        field.Int64
	UpdatedAt        field.Int64
	CreatedAt        field.Int64

	fieldMap map[string]field.Expr
}

func (u userSignLog) Table(newTableName string) *userSignLog {
	u.userSignLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSignLog) As(alias string) *userSignLog {
	u.userSignLogDo.DO = *(u.userSignLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSignLog) updateTableName(table string) *userSignLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.AccessSessionID = field.NewString(table, "access_session_id")
	u.RefreshSessionID = field.NewString(table, "refresh_session_id")
	u.Type = field.NewInt16(table, "type")
	u.Status = field.NewInt16(table, "status")
	u.IP = field.NewString(table, "ip")
	u.Location = field.NewString(table, "location")
	u.Agent = field.NewString(table, "agent")
	u.Device = field.NewString(table, "device")
	u.AccessExpiredAt = field.NewInt64(table, "access_expired_at")
	u.RefreshExpiredAt = field.NewInt64(table, "refresh_expired_at")
	u.DeletedAt = field.NewInt64(table, "deleted_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.CreatedAt = field.NewInt64(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *userSignLog) WithContext(ctx context.Context) IUserSignLogDo {
	return u.userSignLogDo.WithContext(ctx)
}

func (u userSignLog) TableName() string { return u.userSignLogDo.TableName() }

func (u userSignLog) Alias() string { return u.userSignLogDo.Alias() }

func (u userSignLog) Columns(cols ...field.Expr) gen.Columns { return u.userSignLogDo.Columns(cols...) }

func (u *userSignLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSignLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 15)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["access_session_id"] = u.AccessSessionID
	u.fieldMap["refresh_session_id"] = u.RefreshSessionID
	u.fieldMap["type"] = u.Type
	u.fieldMap["status"] = u.Status
	u.fieldMap["ip"] = u.IP
	u.fieldMap["location"] = u.Location
	u.fieldMap["agent"] = u.Agent
	u.fieldMap["device"] = u.Device
	u.fieldMap["access_expired_at"] = u.AccessExpiredAt
	u.fieldMap["refresh_expired_at"] = u.RefreshExpiredAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u userSignLog) clone(db *gorm.DB) userSignLog {
	u.userSignLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSignLog) replaceDB(db *gorm.DB) userSignLog {
	u.userSignLogDo.ReplaceDB(db)
	return u
}

type userSignLogDo struct{ gen.DO }

type IUserSignLogDo interface {
	gen.SubQuery
	Debug() IUserSignLogDo
	WithContext(ctx context.Context) IUserSignLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSignLogDo
	WriteDB() IUserSignLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserSignLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserSignLogDo
	Not(conds ...gen.Condition) IUserSignLogDo
	Or(conds ...gen.Condition) IUserSignLogDo
	Select(conds ...field.Expr) IUserSignLogDo
	Where(conds ...gen.Condition) IUserSignLogDo
	Order(conds ...field.Expr) IUserSignLogDo
	Distinct(cols ...field.Expr) IUserSignLogDo
	Omit(cols ...field.Expr) IUserSignLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserSignLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSignLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSignLogDo
	Group(cols ...field.Expr) IUserSignLogDo
	Having(conds ...gen.Condition) IUserSignLogDo
	Limit(limit int) IUserSignLogDo
	Offset(offset int) IUserSignLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSignLogDo
	Unscoped() IUserSignLogDo
	Create(values ...*model.UserSignLog) error
	CreateInBatches(values []*model.UserSignLog, batchSize int) error
	Save(values ...*model.UserSignLog) error
	First() (*model.UserSignLog, error)
	Take() (*model.UserSignLog, error)
	Last() (*model.UserSignLog, error)
	Find() ([]*model.UserSignLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSignLog, err error)
	FindInBatches(result *[]*model.UserSignLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserSignLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSignLogDo
	Assign(attrs ...field.AssignExpr) IUserSignLogDo
	Joins(fields ...field.RelationField) IUserSignLogDo
	Preload(fields ...field.RelationField) IUserSignLogDo
	FirstOrInit() (*model.UserSignLog, error)
	FirstOrCreate() (*model.UserSignLog, error)
	FindByPage(offset int, limit int) (result []*model.UserSignLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSignLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userSignLogDo) Debug() IUserSignLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userSignLogDo) WithContext(ctx context.Context) IUserSignLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSignLogDo) ReadDB() IUserSignLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSignLogDo) WriteDB() IUserSignLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSignLogDo) Session(config *gorm.Session) IUserSignLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSignLogDo) Clauses(conds ...clause.Expression) IUserSignLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSignLogDo) Returning(value interface{}, columns ...string) IUserSignLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSignLogDo) Not(conds ...gen.Condition) IUserSignLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSignLogDo) Or(conds ...gen.Condition) IUserSignLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSignLogDo) Select(conds ...field.Expr) IUserSignLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSignLogDo) Where(conds ...gen.Condition) IUserSignLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSignLogDo) Order(conds ...field.Expr) IUserSignLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSignLogDo) Distinct(cols ...field.Expr) IUserSignLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSignLogDo) Omit(cols ...field.Expr) IUserSignLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSignLogDo) Join(table schema.Tabler, on ...field.Expr) IUserSignLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSignLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSignLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSignLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserSignLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSignLogDo) Group(cols ...field.Expr) IUserSignLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSignLogDo) Having(conds ...gen.Condition) IUserSignLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSignLogDo) Limit(limit int) IUserSignLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSignLogDo) Offset(offset int) IUserSignLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSignLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSignLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSignLogDo) Unscoped() IUserSignLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSignLogDo) Create(values ...*model.UserSignLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSignLogDo) CreateInBatches(values []*model.UserSignLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSignLogDo) Save(values ...*model.UserSignLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSignLogDo) First() (*model.UserSignLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSignLog), nil
	}
}

func (u userSignLogDo) Take() (*model.UserSignLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSignLog), nil
	}
}

func (u userSignLogDo) Last() (*model.UserSignLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSignLog), nil
	}
}

func (u userSignLogDo) Find() ([]*model.UserSignLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSignLog), err
}

func (u userSignLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSignLog, err error) {
	buf := make([]*model.UserSignLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSignLogDo) FindInBatches(result *[]*model.UserSignLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSignLogDo) Attrs(attrs ...field.AssignExpr) IUserSignLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSignLogDo) Assign(attrs ...field.AssignExpr) IUserSignLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSignLogDo) Joins(fields ...field.RelationField) IUserSignLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSignLogDo) Preload(fields ...field.RelationField) IUserSignLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSignLogDo) FirstOrInit() (*model.UserSignLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSignLog), nil
	}
}

func (u userSignLogDo) FirstOrCreate() (*model.UserSignLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSignLog), nil
	}
}

func (u userSignLogDo) FindByPage(offset int, limit int) (result []*model.UserSignLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSignLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSignLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSignLogDo) Delete(models ...*model.UserSignLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSignLogDo) withDO(do gen.Dao) *userSignLogDo {
	u.DO = *do.(*gen.DO)
	return u
}
