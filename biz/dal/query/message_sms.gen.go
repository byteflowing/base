// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/byteflowing/base/biz/dal/model"
)

func newMessageSms(db *gorm.DB, opts ...gen.DOOption) messageSms {
	_messageSms := messageSms{}

	_messageSms.messageSmsDo.UseDB(db, opts...)
	_messageSms.messageSmsDo.UseModel(&model.MessageSms{})

	tableName := _messageSms.messageSmsDo.TableName()
	_messageSms.ALL = field.NewAsterisk(tableName)
	_messageSms.ID = field.NewInt64(tableName, "id")
	_messageSms.MsgType = field.NewInt16(tableName, "msg_type")
	_messageSms.MsgStatus = field.NewInt16(tableName, "msg_status")
	_messageSms.CaptchaType = field.NewInt16(tableName, "captcha_type")
	_messageSms.Provider = field.NewInt32(tableName, "provider")
	_messageSms.Template = field.NewString(tableName, "template")
	_messageSms.Sign = field.NewString(tableName, "sign")
	_messageSms.RequestID = field.NewString(tableName, "request_id")
	_messageSms.BizID = field.NewString(tableName, "biz_id")
	_messageSms.Phone = field.NewString(tableName, "phone")
	_messageSms.SenderID = field.NewInt64(tableName, "sender_id")
	_messageSms.Params = field.NewString(tableName, "params")
	_messageSms.Content = field.NewString(tableName, "content")
	_messageSms.ErrCode = field.NewString(tableName, "err_code")
	_messageSms.ErrMsg = field.NewString(tableName, "err_msg")
	_messageSms.SendDate = field.NewString(tableName, "send_date")
	_messageSms.ReceiveDate = field.NewString(tableName, "receive_date")
	_messageSms.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_messageSms.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_messageSms.CreatedAt = field.NewInt64(tableName, "created_at")

	_messageSms.fillFieldMap()

	return _messageSms
}

type messageSms struct {
	messageSmsDo messageSmsDo

	ALL         field.Asterisk
	ID          field.Int64
	MsgType     field.Int16
	MsgStatus   field.Int16
	CaptchaType field.Int16
	Provider    field.Int32
	Template    field.String
	Sign        field.String
	RequestID   field.String
	BizID       field.String
	Phone       field.String
	SenderID    field.Int64
	Params      field.String
	Content     field.String
	ErrCode     field.String
	ErrMsg      field.String
	SendDate    field.String
	ReceiveDate field.String
	DeletedAt   field.Int64
	UpdatedAt   field.Int64
	CreatedAt   field.Int64

	fieldMap map[string]field.Expr
}

func (m messageSms) Table(newTableName string) *messageSms {
	m.messageSmsDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageSms) As(alias string) *messageSms {
	m.messageSmsDo.DO = *(m.messageSmsDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageSms) updateTableName(table string) *messageSms {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MsgType = field.NewInt16(table, "msg_type")
	m.MsgStatus = field.NewInt16(table, "msg_status")
	m.CaptchaType = field.NewInt16(table, "captcha_type")
	m.Provider = field.NewInt32(table, "provider")
	m.Template = field.NewString(table, "template")
	m.Sign = field.NewString(table, "sign")
	m.RequestID = field.NewString(table, "request_id")
	m.BizID = field.NewString(table, "biz_id")
	m.Phone = field.NewString(table, "phone")
	m.SenderID = field.NewInt64(table, "sender_id")
	m.Params = field.NewString(table, "params")
	m.Content = field.NewString(table, "content")
	m.ErrCode = field.NewString(table, "err_code")
	m.ErrMsg = field.NewString(table, "err_msg")
	m.SendDate = field.NewString(table, "send_date")
	m.ReceiveDate = field.NewString(table, "receive_date")
	m.DeletedAt = field.NewInt64(table, "deleted_at")
	m.UpdatedAt = field.NewInt64(table, "updated_at")
	m.CreatedAt = field.NewInt64(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *messageSms) WithContext(ctx context.Context) IMessageSmsDo {
	return m.messageSmsDo.WithContext(ctx)
}

func (m messageSms) TableName() string { return m.messageSmsDo.TableName() }

func (m messageSms) Alias() string { return m.messageSmsDo.Alias() }

func (m messageSms) Columns(cols ...field.Expr) gen.Columns { return m.messageSmsDo.Columns(cols...) }

func (m *messageSms) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageSms) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 20)
	m.fieldMap["id"] = m.ID
	m.fieldMap["msg_type"] = m.MsgType
	m.fieldMap["msg_status"] = m.MsgStatus
	m.fieldMap["captcha_type"] = m.CaptchaType
	m.fieldMap["provider"] = m.Provider
	m.fieldMap["template"] = m.Template
	m.fieldMap["sign"] = m.Sign
	m.fieldMap["request_id"] = m.RequestID
	m.fieldMap["biz_id"] = m.BizID
	m.fieldMap["phone"] = m.Phone
	m.fieldMap["sender_id"] = m.SenderID
	m.fieldMap["params"] = m.Params
	m.fieldMap["content"] = m.Content
	m.fieldMap["err_code"] = m.ErrCode
	m.fieldMap["err_msg"] = m.ErrMsg
	m.fieldMap["send_date"] = m.SendDate
	m.fieldMap["receive_date"] = m.ReceiveDate
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m messageSms) clone(db *gorm.DB) messageSms {
	m.messageSmsDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageSms) replaceDB(db *gorm.DB) messageSms {
	m.messageSmsDo.ReplaceDB(db)
	return m
}

type messageSmsDo struct{ gen.DO }

type IMessageSmsDo interface {
	gen.SubQuery
	Debug() IMessageSmsDo
	WithContext(ctx context.Context) IMessageSmsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMessageSmsDo
	WriteDB() IMessageSmsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMessageSmsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMessageSmsDo
	Not(conds ...gen.Condition) IMessageSmsDo
	Or(conds ...gen.Condition) IMessageSmsDo
	Select(conds ...field.Expr) IMessageSmsDo
	Where(conds ...gen.Condition) IMessageSmsDo
	Order(conds ...field.Expr) IMessageSmsDo
	Distinct(cols ...field.Expr) IMessageSmsDo
	Omit(cols ...field.Expr) IMessageSmsDo
	Join(table schema.Tabler, on ...field.Expr) IMessageSmsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMessageSmsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMessageSmsDo
	Group(cols ...field.Expr) IMessageSmsDo
	Having(conds ...gen.Condition) IMessageSmsDo
	Limit(limit int) IMessageSmsDo
	Offset(offset int) IMessageSmsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageSmsDo
	Unscoped() IMessageSmsDo
	Create(values ...*model.MessageSms) error
	CreateInBatches(values []*model.MessageSms, batchSize int) error
	Save(values ...*model.MessageSms) error
	First() (*model.MessageSms, error)
	Take() (*model.MessageSms, error)
	Last() (*model.MessageSms, error)
	Find() ([]*model.MessageSms, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageSms, err error)
	FindInBatches(result *[]*model.MessageSms, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MessageSms) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMessageSmsDo
	Assign(attrs ...field.AssignExpr) IMessageSmsDo
	Joins(fields ...field.RelationField) IMessageSmsDo
	Preload(fields ...field.RelationField) IMessageSmsDo
	FirstOrInit() (*model.MessageSms, error)
	FirstOrCreate() (*model.MessageSms, error)
	FindByPage(offset int, limit int) (result []*model.MessageSms, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMessageSmsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m messageSmsDo) Debug() IMessageSmsDo {
	return m.withDO(m.DO.Debug())
}

func (m messageSmsDo) WithContext(ctx context.Context) IMessageSmsDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageSmsDo) ReadDB() IMessageSmsDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageSmsDo) WriteDB() IMessageSmsDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageSmsDo) Session(config *gorm.Session) IMessageSmsDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageSmsDo) Clauses(conds ...clause.Expression) IMessageSmsDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageSmsDo) Returning(value interface{}, columns ...string) IMessageSmsDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageSmsDo) Not(conds ...gen.Condition) IMessageSmsDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageSmsDo) Or(conds ...gen.Condition) IMessageSmsDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageSmsDo) Select(conds ...field.Expr) IMessageSmsDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageSmsDo) Where(conds ...gen.Condition) IMessageSmsDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageSmsDo) Order(conds ...field.Expr) IMessageSmsDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageSmsDo) Distinct(cols ...field.Expr) IMessageSmsDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageSmsDo) Omit(cols ...field.Expr) IMessageSmsDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageSmsDo) Join(table schema.Tabler, on ...field.Expr) IMessageSmsDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageSmsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMessageSmsDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageSmsDo) RightJoin(table schema.Tabler, on ...field.Expr) IMessageSmsDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageSmsDo) Group(cols ...field.Expr) IMessageSmsDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageSmsDo) Having(conds ...gen.Condition) IMessageSmsDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageSmsDo) Limit(limit int) IMessageSmsDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageSmsDo) Offset(offset int) IMessageSmsDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageSmsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMessageSmsDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageSmsDo) Unscoped() IMessageSmsDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageSmsDo) Create(values ...*model.MessageSms) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageSmsDo) CreateInBatches(values []*model.MessageSms, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageSmsDo) Save(values ...*model.MessageSms) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageSmsDo) First() (*model.MessageSms, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageSms), nil
	}
}

func (m messageSmsDo) Take() (*model.MessageSms, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageSms), nil
	}
}

func (m messageSmsDo) Last() (*model.MessageSms, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageSms), nil
	}
}

func (m messageSmsDo) Find() ([]*model.MessageSms, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageSms), err
}

func (m messageSmsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageSms, err error) {
	buf := make([]*model.MessageSms, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageSmsDo) FindInBatches(result *[]*model.MessageSms, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageSmsDo) Attrs(attrs ...field.AssignExpr) IMessageSmsDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageSmsDo) Assign(attrs ...field.AssignExpr) IMessageSmsDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageSmsDo) Joins(fields ...field.RelationField) IMessageSmsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageSmsDo) Preload(fields ...field.RelationField) IMessageSmsDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageSmsDo) FirstOrInit() (*model.MessageSms, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageSms), nil
	}
}

func (m messageSmsDo) FirstOrCreate() (*model.MessageSms, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageSms), nil
	}
}

func (m messageSmsDo) FindByPage(offset int, limit int) (result []*model.MessageSms, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageSmsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageSmsDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageSmsDo) Delete(models ...*model.MessageSms) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageSmsDo) withDO(do gen.Dao) *messageSmsDo {
	m.DO = *do.(*gen.DO)
	return m
}
