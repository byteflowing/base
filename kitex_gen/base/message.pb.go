// Code generated by Kitex v0.14.1. DO NOT EDIT.

package base

import "github.com/cloudwego/prutal"

type SmsMessage struct {
	Id          uint64        `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CaptchaType CaptchaType   `protobuf:"varint,2,opt,name=captcha_type" json:"captcha_type,omitempty"`  // 验证码类型，依赖msg_type
	MsgType     uint32        `protobuf:"varint,3,opt,name=msg_type" json:"msg_type,omitempty"`          // 验证码组合类型,需要使用CaptchaCombination按位或运算
	Provider    SmsProvider   `protobuf:"varint,4,opt,name=provider" json:"provider,omitempty"`          // 短信供应商
	Type        MessageType   `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`                  // 消息类型
	Status      MessageStatus `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`              // 消息状态
	Template    string        `protobuf:"bytes,7,opt,name=template" json:"template,omitempty"`           // 短信模板
	Sign        string        `protobuf:"bytes,8,opt,name=sign" json:"sign,omitempty"`                   // 短信签名
	RequestId   string        `protobuf:"bytes,9,opt,name=request_id" json:"request_id,omitempty"`       // 短信供应还返回的请求id
	Phone       string        `protobuf:"bytes,10,opt,name=phone" json:"phone,omitempty"`                // 手机号码
	SenderId    string        `protobuf:"bytes,11,opt,name=sender_id" json:"sender_id,omitempty"`        // 发送人id
	Msg         string        `protobuf:"bytes,12,opt,name=msg" json:"msg,omitempty"`                    // 消息内容
	LetterCount uint32        `protobuf:"varint,13,opt,name=letter_count" json:"letter_count,omitempty"` // 字数统计
	MsgCount    uint32        `protobuf:"varint,14,opt,name=msg_count" json:"msg_count,omitempty"`       // 消息条数
	SendTime    uint64        `protobuf:"varint,15,opt,name=send_time" json:"send_time,omitempty"`       // 发送时间戳
	ReceiveTime uint64        `protobuf:"varint,16,opt,name=receive_time" json:"receive_time,omitempty"` // 接收时间戳
	CreatedAt   uint64        `protobuf:"varint,17,opt,name=created_at" json:"created_at,omitempty"`     // 创建时间
	UpdatedAt   uint64        `protobuf:"varint,18,opt,name=updated_at" json:"updated_at,omitempty"`     // 更新时间
}

func (x *SmsMessage) Reset() { *x = SmsMessage{} }

func (x *SmsMessage) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SmsMessage) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SmsMessage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SmsMessage) GetCaptchaType() CaptchaType {
	if x != nil {
		return x.CaptchaType
	}
	return CaptchaType_CAPTCHA_TYPE_UNSPECIFIED
}

func (x *SmsMessage) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *SmsMessage) GetProvider() SmsProvider {
	if x != nil {
		return x.Provider
	}
	return SmsProvider_SMS_PROVIDER_UNSPECIFIED
}

func (x *SmsMessage) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *SmsMessage) GetStatus() MessageStatus {
	if x != nil {
		return x.Status
	}
	return MessageStatus_MESSAGE_STATUS_UNSPECIFIED
}

func (x *SmsMessage) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *SmsMessage) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *SmsMessage) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SmsMessage) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SmsMessage) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *SmsMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SmsMessage) GetLetterCount() uint32 {
	if x != nil {
		return x.LetterCount
	}
	return 0
}

func (x *SmsMessage) GetMsgCount() uint32 {
	if x != nil {
		return x.MsgCount
	}
	return 0
}

func (x *SmsMessage) GetSendTime() uint64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *SmsMessage) GetReceiveTime() uint64 {
	if x != nil {
		return x.ReceiveTime
	}
	return 0
}

func (x *SmsMessage) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SmsMessage) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PagingGetSmsMessageOptions struct {
	RequestId     *string         `protobuf:"bytes,1,opt,name=request_id" json:"request_id,omitempty"`               // request精确查询
	SenderId      *string         `protobuf:"bytes,2,opt,name=sender_id" json:"sender_id,omitempty"`                 // 相等查询
	Phone         *string         `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`                         // 相等查询
	SendTimeStart *uint64         `protobuf:"varint,4,opt,name=send_time_start" json:"send_time_start,omitempty"`    // between查询
	SendTimeEnd   *uint64         `protobuf:"varint,5,opt,name=send_time_end" json:"send_time_end,omitempty"`        // between查询
	CaptchaTypes  []CaptchaType   `protobuf:"varint,6,rep,packed,name=captcha_types" json:"captcha_types,omitempty"` // in查询
	Provider      []SmsProvider   `protobuf:"varint,7,rep,packed,name=provider" json:"provider,omitempty"`           // in查询
	MsgTypes      []MessageType   `protobuf:"varint,8,rep,packed,name=msg_types" json:"msg_types,omitempty"`         // in查询
	MsgStatus     []MessageStatus `protobuf:"varint,9,rep,packed,name=msg_status" json:"msg_status,omitempty"`       // in查询
	Templates     []string        `protobuf:"bytes,10,rep,name=templates" json:"templates,omitempty"`                // in查询
	Signs         []string        `protobuf:"bytes,11,rep,name=signs" json:"signs,omitempty"`                        // in查询
}

func (x *PagingGetSmsMessageOptions) Reset() { *x = PagingGetSmsMessageOptions{} }

func (x *PagingGetSmsMessageOptions) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *PagingGetSmsMessageOptions) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PagingGetSmsMessageOptions) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *PagingGetSmsMessageOptions) GetSenderId() string {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return ""
}

func (x *PagingGetSmsMessageOptions) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *PagingGetSmsMessageOptions) GetSendTimeStart() uint64 {
	if x != nil && x.SendTimeStart != nil {
		return *x.SendTimeStart
	}
	return 0
}

func (x *PagingGetSmsMessageOptions) GetSendTimeEnd() uint64 {
	if x != nil && x.SendTimeEnd != nil {
		return *x.SendTimeEnd
	}
	return 0
}

func (x *PagingGetSmsMessageOptions) GetCaptchaTypes() []CaptchaType {
	if x != nil {
		return x.CaptchaTypes
	}
	return nil
}

func (x *PagingGetSmsMessageOptions) GetProvider() []SmsProvider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *PagingGetSmsMessageOptions) GetMsgTypes() []MessageType {
	if x != nil {
		return x.MsgTypes
	}
	return nil
}

func (x *PagingGetSmsMessageOptions) GetMsgStatus() []MessageStatus {
	if x != nil {
		return x.MsgStatus
	}
	return nil
}

func (x *PagingGetSmsMessageOptions) GetTemplates() []string {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *PagingGetSmsMessageOptions) GetSigns() []string {
	if x != nil {
		return x.Signs
	}
	return nil
}

type SendCaptchaReq struct {
	CaptchaType    CaptchaType       `protobuf:"varint,1,opt,name=captcha_type" json:"captcha_type,omitempty"`                                                               // [必选]验证码类型
	CaptchaContent string            `protobuf:"bytes,2,opt,name=captcha_content" json:"captcha_content,omitempty"`                                                          // [必选]验证码内容
	Sender         MessageSender     `protobuf:"varint,3,opt,name=sender" json:"sender,omitempty"`                                                                           // [必选]发送程序
	Phone          *string           `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`                                                                              // [必选]手机号码
	Email          *string           `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`                                                                              // [可选]邮箱
	SmsProvider    *SmsProvider      `protobuf:"varint,6,opt,name=sms_provider" json:"sms_provider,omitempty"`                                                               // [可选]SMS供应商，默认随机
	EmailProvider  *EmailProvider    `protobuf:"varint,7,opt,name=email_provider" json:"email_provider,omitempty"`                                                           // [可选] email供应商
	Template       *string           `protobuf:"bytes,8,opt,name=template" json:"template,omitempty"`                                                                        // [可选]模板，默认配置文件中定义值
	Sign           *string           `protobuf:"bytes,9,opt,name=sign" json:"sign,omitempty"`                                                                                // [可选]签名，默认配置文件中定义值
	Params         map[string]string `protobuf:"bytes,10,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // [可选]模板参数
}

func (x *SendCaptchaReq) Reset() { *x = SendCaptchaReq{} }

func (x *SendCaptchaReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SendCaptchaReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SendCaptchaReq) GetCaptchaType() CaptchaType {
	if x != nil {
		return x.CaptchaType
	}
	return CaptchaType_CAPTCHA_TYPE_UNSPECIFIED
}

func (x *SendCaptchaReq) GetCaptchaContent() string {
	if x != nil {
		return x.CaptchaContent
	}
	return ""
}

func (x *SendCaptchaReq) GetSender() MessageSender {
	if x != nil {
		return x.Sender
	}
	return MessageSender_MESSAGE_SENDER_UNSPECIFIED
}

func (x *SendCaptchaReq) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *SendCaptchaReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *SendCaptchaReq) GetSmsProvider() SmsProvider {
	if x != nil && x.SmsProvider != nil {
		return *x.SmsProvider
	}
	return SmsProvider_SMS_PROVIDER_UNSPECIFIED
}

func (x *SendCaptchaReq) GetEmailProvider() EmailProvider {
	if x != nil && x.EmailProvider != nil {
		return *x.EmailProvider
	}
	return EmailProvider_EMAIL_PROVIDER_UNSPECIFIED
}

func (x *SendCaptchaReq) GetTemplate() string {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return ""
}

func (x *SendCaptchaReq) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

func (x *SendCaptchaReq) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type SendCaptchaResp struct {
	Token  string      `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"` // 验证码存储的key
	Tag    *string     `protobuf:"bytes,2,opt,name=Tag" json:"Tag,omitempty"`     // 用于区分被限流的时间窗口
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *SendCaptchaResp) Reset() { *x = SendCaptchaResp{} }

func (x *SendCaptchaResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SendCaptchaResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SendCaptchaResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SendCaptchaResp) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *SendCaptchaResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type VerifyCaptchaReq struct {
	CaptchaType CaptchaType   `protobuf:"varint,1,opt,name=captcha_type" json:"captcha_type,omitempty"` // [必选]验证码类型
	Sender      MessageSender `protobuf:"varint,2,opt,name=sender" json:"sender,omitempty"`             // [必选]消息发送程序
	Captcha     string        `protobuf:"bytes,3,opt,name=captcha" json:"captcha,omitempty"`            // [必选]验证码
	Token       string        `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`                // [必选]验证码key
}

func (x *VerifyCaptchaReq) Reset() { *x = VerifyCaptchaReq{} }

func (x *VerifyCaptchaReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *VerifyCaptchaReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *VerifyCaptchaReq) GetCaptchaType() CaptchaType {
	if x != nil {
		return x.CaptchaType
	}
	return CaptchaType_CAPTCHA_TYPE_UNSPECIFIED
}

func (x *VerifyCaptchaReq) GetSender() MessageSender {
	if x != nil {
		return x.Sender
	}
	return MessageSender_MESSAGE_SENDER_UNSPECIFIED
}

func (x *VerifyCaptchaReq) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

func (x *VerifyCaptchaReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type VerifyCaptchaResp struct {
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *VerifyCaptchaResp) Reset() { *x = VerifyCaptchaResp{} }

func (x *VerifyCaptchaResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *VerifyCaptchaResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *VerifyCaptchaResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type PagingGetSmsMessagesReq struct {
	Page     uint32                      `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	PageSize uint32                      `protobuf:"varint,2,opt,name=page_size" json:"page_size,omitempty"`
	Sort     string                      `protobuf:"bytes,3,opt,name=sort" json:"sort,omitempty"`
	Options  *PagingGetSmsMessageOptions `protobuf:"bytes,4,opt,name=options" json:"options,omitempty"`
}

func (x *PagingGetSmsMessagesReq) Reset() { *x = PagingGetSmsMessagesReq{} }

func (x *PagingGetSmsMessagesReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *PagingGetSmsMessagesReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PagingGetSmsMessagesReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PagingGetSmsMessagesReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PagingGetSmsMessagesReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *PagingGetSmsMessagesReq) GetOptions() *PagingGetSmsMessageOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type PagingGetSmsMessagesResp struct {
	TotalCount  uint64        `protobuf:"varint,1,opt,name=total_count" json:"total_count,omitempty"`
	TotalPages  uint32        `protobuf:"varint,2,opt,name=total_pages" json:"total_pages,omitempty"`
	CurrentPage uint32        `protobuf:"varint,3,opt,name=current_page" json:"current_page,omitempty"`
	PageSize    uint32        `protobuf:"varint,4,opt,name=page_size" json:"page_size,omitempty"`
	HasNextPage bool          `protobuf:"varint,5,opt,name=has_next_page" json:"has_next_page,omitempty"`
	HasPrevPage bool          `protobuf:"varint,6,opt,name=has_prev_page" json:"has_prev_page,omitempty"`
	Messages    []*SmsMessage `protobuf:"bytes,7,rep,name=messages" json:"messages,omitempty"`
	Common      *CommonResp   `protobuf:"bytes,8,opt,name=common" json:"common,omitempty"`
}

func (x *PagingGetSmsMessagesResp) Reset() { *x = PagingGetSmsMessagesResp{} }

func (x *PagingGetSmsMessagesResp) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *PagingGetSmsMessagesResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PagingGetSmsMessagesResp) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *PagingGetSmsMessagesResp) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *PagingGetSmsMessagesResp) GetCurrentPage() uint32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *PagingGetSmsMessagesResp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PagingGetSmsMessagesResp) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

func (x *PagingGetSmsMessagesResp) GetHasPrevPage() bool {
	if x != nil {
		return x.HasPrevPage
	}
	return false
}

func (x *PagingGetSmsMessagesResp) GetMessages() []*SmsMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *PagingGetSmsMessagesResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}
