// Code generated by Kitex v0.14.1. DO NOT EDIT.

package base

import "github.com/cloudwego/prutal"

type User struct {
	Number        string      `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	Name          string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Alias         *string     `protobuf:"bytes,3,opt,name=alias" json:"alias,omitempty"`
	Avatar        *string     `protobuf:"bytes,4,opt,name=avatar" json:"avatar,omitempty"`
	Gender        *Gender     `protobuf:"varint,5,opt,name=gender" json:"gender,omitempty"`
	Phone         *string     `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
	Email         *string     `protobuf:"bytes,7,opt,name=email" json:"email,omitempty"`
	Country       *string     `protobuf:"bytes,8,opt,name=country" json:"country,omitempty"`
	Province      *string     `protobuf:"bytes,9,opt,name=province" json:"province,omitempty"`
	City          *string     `protobuf:"bytes,10,opt,name=city" json:"city,omitempty"`
	District      *string     `protobuf:"bytes,11,opt,name=district" json:"district,omitempty"`
	Addr          *string     `protobuf:"bytes,12,opt,name=addr" json:"addr,omitempty"`
	Status        *UserStatus `protobuf:"varint,13,opt,name=status" json:"status,omitempty"`
	Source        *UserSource `protobuf:"varint,14,opt,name=source" json:"source,omitempty"`
	Type          *uint32     `protobuf:"varint,15,opt,name=type" json:"type,omitempty"`
	Level         *uint32     `protobuf:"varint,16,opt,name=level" json:"level,omitempty"`
	PhoneVerified *bool       `protobuf:"varint,17,opt,name=phone_verified" json:"phone_verified,omitempty"`
	EmailVerified *bool       `protobuf:"varint,18,opt,name=email_verified" json:"email_verified,omitempty"`
	DeletedAt     *uint64     `protobuf:"varint,19,opt,name=deleted_at" json:"deleted_at,omitempty"`
	UpdatedAt     *uint64     `protobuf:"varint,20,opt,name=updated_at" json:"updated_at,omitempty"`
	CreatedAt     *uint64     `protobuf:"varint,21,opt,name=created_at" json:"created_at,omitempty"`
}

func (x *User) Reset() { *x = User{} }

func (x *User) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *User) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *User) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *User) GetGender() Gender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *User) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *User) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *User) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *User) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *User) GetDistrict() string {
	if x != nil && x.District != nil {
		return *x.District
	}
	return ""
}

func (x *User) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *User) GetStatus() UserStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserStatus_USER_STATUS_UNSPECIFIED
}

func (x *User) GetSource() UserSource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return UserSource_USER_SOURCE_UNSPECIFIED
}

func (x *User) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *User) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *User) GetPhoneVerified() bool {
	if x != nil && x.PhoneVerified != nil {
		return *x.PhoneVerified
	}
	return false
}

func (x *User) GetEmailVerified() bool {
	if x != nil && x.EmailVerified != nil {
		return *x.EmailVerified
	}
	return false
}

func (x *User) GetDeletedAt() uint64 {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return 0
}

func (x *User) GetUpdatedAt() uint64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *User) GetCreatedAt() uint64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

type AddUserParams struct {
	Name          string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Alias         *string     `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
	Avatar        *string     `protobuf:"bytes,3,opt,name=avatar" json:"avatar,omitempty"`
	Gender        *Gender     `protobuf:"varint,4,opt,name=gender" json:"gender,omitempty"`
	Phone         *string     `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`
	Email         *string     `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	CountryCode   *string     `protobuf:"bytes,7,opt,name=country_code" json:"country_code,omitempty"`
	ProvinceCode  *string     `protobuf:"bytes,8,opt,name=province_code" json:"province_code,omitempty"`
	CityCode      *string     `protobuf:"bytes,9,opt,name=city_code" json:"city_code,omitempty"`
	DistrictCode  *string     `protobuf:"bytes,10,opt,name=district_code" json:"district_code,omitempty"`
	Addr          *string     `protobuf:"bytes,11,opt,name=addr" json:"addr,omitempty"`
	Status        *UserStatus `protobuf:"varint,12,opt,name=status" json:"status,omitempty"`
	Source        *UserSource `protobuf:"varint,13,opt,name=source" json:"source,omitempty"`
	Type          *uint32     `protobuf:"varint,14,opt,name=type" json:"type,omitempty"`
	Level         *uint32     `protobuf:"varint,15,opt,name=level" json:"level,omitempty"`
	PhoneVerified *bool       `protobuf:"varint,16,opt,name=phone_verified" json:"phone_verified,omitempty"`
	EmailVerified *bool       `protobuf:"varint,17,opt,name=email_verified" json:"email_verified,omitempty"`
}

func (x *AddUserParams) Reset() { *x = AddUserParams{} }

func (x *AddUserParams) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AddUserParams) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AddUserParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddUserParams) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *AddUserParams) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *AddUserParams) GetGender() Gender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *AddUserParams) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *AddUserParams) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *AddUserParams) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *AddUserParams) GetProvinceCode() string {
	if x != nil && x.ProvinceCode != nil {
		return *x.ProvinceCode
	}
	return ""
}

func (x *AddUserParams) GetCityCode() string {
	if x != nil && x.CityCode != nil {
		return *x.CityCode
	}
	return ""
}

func (x *AddUserParams) GetDistrictCode() string {
	if x != nil && x.DistrictCode != nil {
		return *x.DistrictCode
	}
	return ""
}

func (x *AddUserParams) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *AddUserParams) GetStatus() UserStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserStatus_USER_STATUS_UNSPECIFIED
}

func (x *AddUserParams) GetSource() UserSource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return UserSource_USER_SOURCE_UNSPECIFIED
}

func (x *AddUserParams) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *AddUserParams) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *AddUserParams) GetPhoneVerified() bool {
	if x != nil && x.PhoneVerified != nil {
		return *x.PhoneVerified
	}
	return false
}

func (x *AddUserParams) GetEmailVerified() bool {
	if x != nil && x.EmailVerified != nil {
		return *x.EmailVerified
	}
	return false
}

type LoginLog struct {
	Id        uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Uid       uint64      `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	SessionId string      `protobuf:"bytes,3,opt,name=session_id" json:"session_id,omitempty"`
	Type      LoginType   `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Status    LoginStatus `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
	Ip        *string     `protobuf:"bytes,6,opt,name=ip" json:"ip,omitempty"`
	Location  *string     `protobuf:"bytes,7,opt,name=location" json:"location,omitempty"`
	Agent     *string     `protobuf:"bytes,8,opt,name=agent" json:"agent,omitempty"`
	Device    *string     `protobuf:"bytes,9,opt,name=device" json:"device,omitempty"`
	DeletedAt *uint64     `protobuf:"varint,10,opt,name=deleted_at" json:"deleted_at,omitempty"`
	UpdatedAt *uint64     `protobuf:"varint,11,opt,name=updated_at" json:"updated_at,omitempty"`
	CreatedAt *uint64     `protobuf:"varint,12,opt,name=created_at" json:"created_at,omitempty"`
}

func (x *LoginLog) Reset() { *x = LoginLog{} }

func (x *LoginLog) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *LoginLog) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *LoginLog) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoginLog) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LoginLog) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LoginLog) GetType() LoginType {
	if x != nil {
		return x.Type
	}
	return LoginType_LOGIN_TYPE_UNSPECIFIED
}

func (x *LoginLog) GetStatus() LoginStatus {
	if x != nil {
		return x.Status
	}
	return LoginStatus_LOGIN_STATUS_UNSPECIFIED
}

func (x *LoginLog) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *LoginLog) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *LoginLog) GetAgent() string {
	if x != nil && x.Agent != nil {
		return *x.Agent
	}
	return ""
}

func (x *LoginLog) GetDevice() string {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return ""
}

func (x *LoginLog) GetDeletedAt() uint64 {
	if x != nil && x.DeletedAt != nil {
		return *x.DeletedAt
	}
	return 0
}

func (x *LoginLog) GetUpdatedAt() uint64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *LoginLog) GetCreatedAt() uint64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

type PagingGetUserOptions struct {
	Number        *string      `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`                  // number精确匹配
	Name          *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`                      // name模糊匹配 %name%
	Alias         *string      `protobuf:"bytes,3,opt,name=alias" json:"alias,omitempty"`                    // alias模糊匹配 %alias%
	Phone         *string      `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`                    // phone后缀匹配 alias%
	Email         *string      `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`                    // email后缀匹配 email%
	PhoneVerified *bool        `protobuf:"varint,6,opt,name=phone_verified" json:"phone_verified,omitempty"` // phone_verified相等匹配
	EmailVerified *bool        `protobuf:"varint,7,opt,name=email_verified" json:"email_verified,omitempty"` // email_verified相等匹配
	CountryCode   *string      `protobuf:"bytes,8,opt,name=country_code" json:"country_code,omitempty"`      // country相等匹配
	CityCode      *string      `protobuf:"bytes,9,opt,name=city_code" json:"city_code,omitempty"`            // city_code相等匹配
	DistrictCode  *string      `protobuf:"bytes,10,opt,name=district_code" json:"district_code,omitempty"`   // district_code相等匹配
	Genders       []Gender     `protobuf:"varint,11,rep,packed,name=genders" json:"genders,omitempty"`       // in查询
	Statuses      []UserStatus `protobuf:"varint,12,rep,packed,name=statuses" json:"statuses,omitempty"`     // in查询
	Sources       []UserSource `protobuf:"varint,13,rep,packed,name=sources" json:"sources,omitempty"`       // in查询
	Types         []string     `protobuf:"bytes,14,rep,name=types" json:"types,omitempty"`                   // in查询
	Levels        []string     `protobuf:"bytes,15,rep,name=levels" json:"levels,omitempty"`                 // in查询
}

func (x *PagingGetUserOptions) Reset() { *x = PagingGetUserOptions{} }

func (x *PagingGetUserOptions) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *PagingGetUserOptions) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PagingGetUserOptions) GetNumber() string {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return ""
}

func (x *PagingGetUserOptions) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PagingGetUserOptions) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *PagingGetUserOptions) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *PagingGetUserOptions) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *PagingGetUserOptions) GetPhoneVerified() bool {
	if x != nil && x.PhoneVerified != nil {
		return *x.PhoneVerified
	}
	return false
}

func (x *PagingGetUserOptions) GetEmailVerified() bool {
	if x != nil && x.EmailVerified != nil {
		return *x.EmailVerified
	}
	return false
}

func (x *PagingGetUserOptions) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *PagingGetUserOptions) GetCityCode() string {
	if x != nil && x.CityCode != nil {
		return *x.CityCode
	}
	return ""
}

func (x *PagingGetUserOptions) GetDistrictCode() string {
	if x != nil && x.DistrictCode != nil {
		return *x.DistrictCode
	}
	return ""
}

func (x *PagingGetUserOptions) GetGenders() []Gender {
	if x != nil {
		return x.Genders
	}
	return nil
}

func (x *PagingGetUserOptions) GetStatuses() []UserStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *PagingGetUserOptions) GetSources() []UserSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *PagingGetUserOptions) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *PagingGetUserOptions) GetLevels() []string {
	if x != nil {
		return x.Levels
	}
	return nil
}

type PagingGetLoginLogOptions struct {
	Uid      *uint64       `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`                  // uid相等匹配
	Types    []LoginType   `protobuf:"varint,2,rep,packed,name=types" json:"types,omitempty"`       // in查询
	Statuses []LoginStatus `protobuf:"varint,3,rep,packed,name=statuses" json:"statuses,omitempty"` // in查询
}

func (x *PagingGetLoginLogOptions) Reset() { *x = PagingGetLoginLogOptions{} }

func (x *PagingGetLoginLogOptions) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *PagingGetLoginLogOptions) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PagingGetLoginLogOptions) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *PagingGetLoginLogOptions) GetTypes() []LoginType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *PagingGetLoginLogOptions) GetStatuses() []LoginStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type SendPhoneCaptchaReq struct {
	Type  CaptchaType `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Phone string      `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
}

func (x *SendPhoneCaptchaReq) Reset() { *x = SendPhoneCaptchaReq{} }

func (x *SendPhoneCaptchaReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SendPhoneCaptchaReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SendPhoneCaptchaReq) GetType() CaptchaType {
	if x != nil {
		return x.Type
	}
	return CaptchaType_CAPTCHA_TYPE_UNSPECIFIED
}

func (x *SendPhoneCaptchaReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type SendPhoneCaptchaResp struct {
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *SendPhoneCaptchaResp) Reset() { *x = SendPhoneCaptchaResp{} }

func (x *SendPhoneCaptchaResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SendPhoneCaptchaResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SendPhoneCaptchaResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type SendEmailCaptchaReq struct {
	Type  CaptchaType `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Email string      `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (x *SendEmailCaptchaReq) Reset() { *x = SendEmailCaptchaReq{} }

func (x *SendEmailCaptchaReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SendEmailCaptchaReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SendEmailCaptchaReq) GetType() CaptchaType {
	if x != nil {
		return x.Type
	}
	return CaptchaType_CAPTCHA_TYPE_UNSPECIFIED
}

func (x *SendEmailCaptchaReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type SendEmailCaptchaResp struct {
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *SendEmailCaptchaResp) Reset() { *x = SendEmailCaptchaResp{} }

func (x *SendEmailCaptchaResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SendEmailCaptchaResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SendEmailCaptchaResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type LoginReq struct {
	Type       LoginType `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Phone      *string   `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	Email      *string   `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Password   *string   `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	Captcha    *string   `protobuf:"bytes,5,opt,name=captcha" json:"captcha,omitempty"`
	WechatCode *string   `protobuf:"bytes,6,opt,name=wechat_code" json:"wechat_code,omitempty"`
	Agent      *Agent    `protobuf:"bytes,255,opt,name=agent" json:"agent,omitempty"`
}

func (x *LoginReq) Reset() { *x = LoginReq{} }

func (x *LoginReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *LoginReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *LoginReq) GetType() LoginType {
	if x != nil {
		return x.Type
	}
	return LoginType_LOGIN_TYPE_UNSPECIFIED
}

func (x *LoginReq) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *LoginReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *LoginReq) GetCaptcha() string {
	if x != nil && x.Captcha != nil {
		return *x.Captcha
	}
	return ""
}

func (x *LoginReq) GetWechatCode() string {
	if x != nil && x.WechatCode != nil {
		return *x.WechatCode
	}
	return ""
}

func (x *LoginReq) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type LoginResp struct {
	Token  string      `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *LoginResp) Reset() { *x = LoginResp{} }

func (x *LoginResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *LoginResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *LoginResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type LogoutReq struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (x *LogoutReq) Reset() { *x = LogoutReq{} }

func (x *LogoutReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *LogoutReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *LogoutReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type LogoutResp struct {
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *LogoutResp) Reset() { *x = LogoutResp{} }

func (x *LogoutResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *LogoutResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *LogoutResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type ForceLogoutBySessionIdReq struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id" json:"session_id,omitempty"`
}

func (x *ForceLogoutBySessionIdReq) Reset() { *x = ForceLogoutBySessionIdReq{} }

func (x *ForceLogoutBySessionIdReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *ForceLogoutBySessionIdReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ForceLogoutBySessionIdReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ForceLogoutBySessionIdResp struct {
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *ForceLogoutBySessionIdResp) Reset() { *x = ForceLogoutBySessionIdResp{} }

func (x *ForceLogoutBySessionIdResp) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *ForceLogoutBySessionIdResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ForceLogoutBySessionIdResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type RefreshTokenReq struct {
	OldToken string `protobuf:"bytes,1,opt,name=old_token" json:"old_token,omitempty"`
}

func (x *RefreshTokenReq) Reset() { *x = RefreshTokenReq{} }

func (x *RefreshTokenReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *RefreshTokenReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *RefreshTokenReq) GetOldToken() string {
	if x != nil {
		return x.OldToken
	}
	return ""
}

type RefreshTokenResp struct {
	NewToken string      `protobuf:"bytes,1,opt,name=new_token" json:"new_token,omitempty"`
	Common   *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *RefreshTokenResp) Reset() { *x = RefreshTokenResp{} }

func (x *RefreshTokenResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *RefreshTokenResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *RefreshTokenResp) GetNewToken() string {
	if x != nil {
		return x.NewToken
	}
	return ""
}

func (x *RefreshTokenResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type VerifyTokenReq struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (x *VerifyTokenReq) Reset() { *x = VerifyTokenReq{} }

func (x *VerifyTokenReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *VerifyTokenReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *VerifyTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type VerifyTokenResp struct {
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *VerifyTokenResp) Reset() { *x = VerifyTokenResp{} }

func (x *VerifyTokenResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *VerifyTokenResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *VerifyTokenResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type AddUserReq struct {
	Param *AddUserParams `protobuf:"bytes,1,opt,name=param" json:"param,omitempty"`
}

func (x *AddUserReq) Reset() { *x = AddUserReq{} }

func (x *AddUserReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AddUserReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AddUserReq) GetParam() *AddUserParams {
	if x != nil {
		return x.Param
	}
	return nil
}

type AddUserResp struct {
	User   *User       `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *AddUserResp) Reset() { *x = AddUserResp{} }

func (x *AddUserResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AddUserResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AddUserResp) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AddUserResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type BatchAddUsersReq struct {
	Params []*AddUserParams `protobuf:"bytes,1,rep,name=params" json:"params,omitempty"`
}

func (x *BatchAddUsersReq) Reset() { *x = BatchAddUsersReq{} }

func (x *BatchAddUsersReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *BatchAddUsersReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *BatchAddUsersReq) GetParams() []*AddUserParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type BatchAddUsersResp struct {
	Users  []*User     `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *BatchAddUsersResp) Reset() { *x = BatchAddUsersResp{} }

func (x *BatchAddUsersResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *BatchAddUsersResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *BatchAddUsersResp) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *BatchAddUsersResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type UpdateUserReq struct {
	Number        string      `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	Name          string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Alias         *string     `protobuf:"bytes,3,opt,name=alias" json:"alias,omitempty"`
	Avatar        *string     `protobuf:"bytes,4,opt,name=avatar" json:"avatar,omitempty"`
	Gender        *Gender     `protobuf:"varint,5,opt,name=gender" json:"gender,omitempty"`
	Phone         *string     `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
	Email         *string     `protobuf:"bytes,7,opt,name=email" json:"email,omitempty"`
	CountryCode   *string     `protobuf:"bytes,8,opt,name=country_code" json:"country_code,omitempty"`
	ProvinceCode  *string     `protobuf:"bytes,9,opt,name=province_code" json:"province_code,omitempty"`
	CityCode      *string     `protobuf:"bytes,10,opt,name=city_code" json:"city_code,omitempty"`
	DistrictCode  *string     `protobuf:"bytes,11,opt,name=district_code" json:"district_code,omitempty"`
	Addr          *string     `protobuf:"bytes,12,opt,name=addr" json:"addr,omitempty"`
	Status        *UserStatus `protobuf:"varint,13,opt,name=status" json:"status,omitempty"`
	Source        *UserSource `protobuf:"varint,14,opt,name=source" json:"source,omitempty"`
	Type          *uint32     `protobuf:"varint,15,opt,name=type" json:"type,omitempty"`
	Level         *uint32     `protobuf:"varint,16,opt,name=level" json:"level,omitempty"`
	PhoneVerified *bool       `protobuf:"varint,17,opt,name=phone_verified" json:"phone_verified,omitempty"`
	EmailVerified *bool       `protobuf:"varint,18,opt,name=email_verified" json:"email_verified,omitempty"`
}

func (x *UpdateUserReq) Reset() { *x = UpdateUserReq{} }

func (x *UpdateUserReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UpdateUserReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UpdateUserReq) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *UpdateUserReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateUserReq) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UpdateUserReq) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *UpdateUserReq) GetGender() Gender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *UpdateUserReq) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *UpdateUserReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UpdateUserReq) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *UpdateUserReq) GetProvinceCode() string {
	if x != nil && x.ProvinceCode != nil {
		return *x.ProvinceCode
	}
	return ""
}

func (x *UpdateUserReq) GetCityCode() string {
	if x != nil && x.CityCode != nil {
		return *x.CityCode
	}
	return ""
}

func (x *UpdateUserReq) GetDistrictCode() string {
	if x != nil && x.DistrictCode != nil {
		return *x.DistrictCode
	}
	return ""
}

func (x *UpdateUserReq) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *UpdateUserReq) GetStatus() UserStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserStatus_USER_STATUS_UNSPECIFIED
}

func (x *UpdateUserReq) GetSource() UserSource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return UserSource_USER_SOURCE_UNSPECIFIED
}

func (x *UpdateUserReq) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *UpdateUserReq) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *UpdateUserReq) GetPhoneVerified() bool {
	if x != nil && x.PhoneVerified != nil {
		return *x.PhoneVerified
	}
	return false
}

func (x *UpdateUserReq) GetEmailVerified() bool {
	if x != nil && x.EmailVerified != nil {
		return *x.EmailVerified
	}
	return false
}

type UpdateUserResp struct {
	User   *User       `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *UpdateUserResp) Reset() { *x = UpdateUserResp{} }

func (x *UpdateUserResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UpdateUserResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UpdateUserResp) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateUserResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type DeleteUserReq struct {
	Number string `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
}

func (x *DeleteUserReq) Reset() { *x = DeleteUserReq{} }

func (x *DeleteUserReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *DeleteUserReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *DeleteUserReq) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type DeleteUserResp struct {
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *DeleteUserResp) Reset() { *x = DeleteUserResp{} }

func (x *DeleteUserResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *DeleteUserResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *DeleteUserResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type BatchDeleteUsersReq struct {
	Numbers []string `protobuf:"bytes,1,rep,name=numbers" json:"numbers,omitempty"`
}

func (x *BatchDeleteUsersReq) Reset() { *x = BatchDeleteUsersReq{} }

func (x *BatchDeleteUsersReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *BatchDeleteUsersReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *BatchDeleteUsersReq) GetNumbers() []string {
	if x != nil {
		return x.Numbers
	}
	return nil
}

type BatchDeleteUsersResp struct {
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *BatchDeleteUsersResp) Reset() { *x = BatchDeleteUsersResp{} }

func (x *BatchDeleteUsersResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *BatchDeleteUsersResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *BatchDeleteUsersResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type GetUserByNumberReq struct {
	Number string `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
}

func (x *GetUserByNumberReq) Reset() { *x = GetUserByNumberReq{} }

func (x *GetUserByNumberReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetUserByNumberReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetUserByNumberReq) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type GetUserByNumberResp struct {
	User   *User       `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Common *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *GetUserByNumberResp) Reset() { *x = GetUserByNumberResp{} }

func (x *GetUserByNumberResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetUserByNumberResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetUserByNumberResp) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetUserByNumberResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type PagingGetUsersReq struct {
	Page     uint32                `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	PageSize uint32                `protobuf:"varint,2,opt,name=page_size" json:"page_size,omitempty"`
	Sort     string                `protobuf:"bytes,3,opt,name=sort" json:"sort,omitempty"`
	Options  *PagingGetUserOptions `protobuf:"bytes,4,opt,name=options" json:"options,omitempty"`
}

func (x *PagingGetUsersReq) Reset() { *x = PagingGetUsersReq{} }

func (x *PagingGetUsersReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *PagingGetUsersReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PagingGetUsersReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PagingGetUsersReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PagingGetUsersReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *PagingGetUsersReq) GetOptions() *PagingGetUserOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type PagingGetUsersResp struct {
	TotalCount  uint64      `protobuf:"varint,1,opt,name=total_count" json:"total_count,omitempty"`
	TotalPages  uint32      `protobuf:"varint,2,opt,name=total_pages" json:"total_pages,omitempty"`
	CurrentPage uint32      `protobuf:"varint,3,opt,name=current_page" json:"current_page,omitempty"`
	PageSize    uint32      `protobuf:"varint,4,opt,name=page_size" json:"page_size,omitempty"`
	HasNextPage bool        `protobuf:"varint,5,opt,name=has_next_page" json:"has_next_page,omitempty"`
	HasPrevPage bool        `protobuf:"varint,6,opt,name=has_prev_page" json:"has_prev_page,omitempty"`
	Users       []*User     `protobuf:"bytes,7,rep,name=users" json:"users,omitempty"`
	Common      *CommonResp `protobuf:"bytes,8,opt,name=common" json:"common,omitempty"`
}

func (x *PagingGetUsersResp) Reset() { *x = PagingGetUsersResp{} }

func (x *PagingGetUsersResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *PagingGetUsersResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PagingGetUsersResp) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *PagingGetUsersResp) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *PagingGetUsersResp) GetCurrentPage() uint32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *PagingGetUsersResp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PagingGetUsersResp) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

func (x *PagingGetUsersResp) GetHasPrevPage() bool {
	if x != nil {
		return x.HasPrevPage
	}
	return false
}

func (x *PagingGetUsersResp) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *PagingGetUsersResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type GetUserLoginLogsReq struct {
	Uid      uint64        `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Types    []LoginType   `protobuf:"varint,2,rep,packed,name=types" json:"types,omitempty"`
	Statuses []LoginStatus `protobuf:"varint,3,rep,packed,name=statuses" json:"statuses,omitempty"`
}

func (x *GetUserLoginLogsReq) Reset() { *x = GetUserLoginLogsReq{} }

func (x *GetUserLoginLogsReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetUserLoginLogsReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetUserLoginLogsReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetUserLoginLogsReq) GetTypes() []LoginType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GetUserLoginLogsReq) GetStatuses() []LoginStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type GetUserLoginLogsResp struct {
	Logs   []*LoginLog `protobuf:"bytes,1,rep,name=logs" json:"logs,omitempty"`
	Common *CommonResp `protobuf:"bytes,2,opt,name=common" json:"common,omitempty"`
}

func (x *GetUserLoginLogsResp) Reset() { *x = GetUserLoginLogsResp{} }

func (x *GetUserLoginLogsResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetUserLoginLogsResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetUserLoginLogsResp) GetLogs() []*LoginLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *GetUserLoginLogsResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}

type PagingGetLoginLogsReq struct {
	Page     uint32                    `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	PageSize uint32                    `protobuf:"varint,2,opt,name=page_size" json:"page_size,omitempty"`
	Sort     string                    `protobuf:"bytes,3,opt,name=sort" json:"sort,omitempty"`
	Options  *PagingGetLoginLogOptions `protobuf:"bytes,4,opt,name=options" json:"options,omitempty"`
}

func (x *PagingGetLoginLogsReq) Reset() { *x = PagingGetLoginLogsReq{} }

func (x *PagingGetLoginLogsReq) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *PagingGetLoginLogsReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PagingGetLoginLogsReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PagingGetLoginLogsReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PagingGetLoginLogsReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *PagingGetLoginLogsReq) GetOptions() *PagingGetLoginLogOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type PagingGetLoginLogsResp struct {
	TotalCount  uint64      `protobuf:"varint,1,opt,name=total_count" json:"total_count,omitempty"`
	TotalPages  uint32      `protobuf:"varint,2,opt,name=total_pages" json:"total_pages,omitempty"`
	CurrentPage uint32      `protobuf:"varint,3,opt,name=current_page" json:"current_page,omitempty"`
	PageSize    uint32      `protobuf:"varint,4,opt,name=page_size" json:"page_size,omitempty"`
	HasNextPage bool        `protobuf:"varint,5,opt,name=has_next_page" json:"has_next_page,omitempty"`
	HasPrevPage bool        `protobuf:"varint,6,opt,name=has_prev_page" json:"has_prev_page,omitempty"`
	Logs        []*LoginLog `protobuf:"bytes,7,rep,name=logs" json:"logs,omitempty"`
	Common      *CommonResp `protobuf:"bytes,255,opt,name=common" json:"common,omitempty"`
}

func (x *PagingGetLoginLogsResp) Reset() { *x = PagingGetLoginLogsResp{} }

func (x *PagingGetLoginLogsResp) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *PagingGetLoginLogsResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *PagingGetLoginLogsResp) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *PagingGetLoginLogsResp) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *PagingGetLoginLogsResp) GetCurrentPage() uint32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *PagingGetLoginLogsResp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PagingGetLoginLogsResp) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

func (x *PagingGetLoginLogsResp) GetHasPrevPage() bool {
	if x != nil {
		return x.HasPrevPage
	}
	return false
}

func (x *PagingGetLoginLogsResp) GetLogs() []*LoginLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *PagingGetLoginLogsResp) GetCommon() *CommonResp {
	if x != nil {
		return x.Common
	}
	return nil
}
